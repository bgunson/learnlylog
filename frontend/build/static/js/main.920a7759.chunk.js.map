{"version":3,"sources":["components/RealmApp.js","components/AppName.js","components/MoreInfo.js","utils.js","hooks/useErrorAlert.js","components/WelcomePage.js","hooks/useCollection.js","components/DraftTodoItem.js","colors.js","components/Theme.js","pages/Account/AccountPage.jsx","hooks/useCourses.js","pages/AllCourses/AllCoursesPage.jsx","pages/Chat/ChatPage.jsx","hooks/useModules.js","hooks/useCourseEnrollment.js","hooks/useUserModules.js","pages/CourseModules/CourseModulesPage.jsx","pages/Home/HomePage.jsx","pages/Interests/InterestsPage.jsx","pages/LearningLog/LearningLogPage.jsx","pages/Module/ModulePage.jsx","pages/ModuleQuiz/QuestionCard.jsx","pages/ModuleQuiz/ModuleQuizPage.jsx","hooks/useQuizQuestion.js","components/App.js","reportWebVitals.js","index.js"],"names":["createRealmApp","id","Realm","baseUrl","RealmAppContext","React","createContext","RealmAppProvider","appId","children","useState","realmApp","setRealmApp","useEffect","currentUser","setCurrentUser","logIn","useCallback","credentials","a","logOut","removeUser","realmAppContext","useMemo","Provider","value","useRealmApp","useContext","Error","AppName","Typography","className","component","variant","style","textDecoration","color","to","MoreInfoItem","Container","textAlign","padding","marginTop","MoreInfoTemplateAndDocs","Link","target","href","pathAddition","baseUrlPath","URL","pathname","fullPath","path","join","appendUrlPath","appUrl","toggleBoolean","prev","Alert","props","elevation","ErrorAlert","isOpen","message","onClose","severity","WelcomePage","navigate","useNavigate","isSignup","setIsSignup","noErrors","email","password","other","error","setError","clearErrors","NonAuthErrorAlert","clearError","hideAfterMs","showErrorAlert","setShowErrorAlert","clearErrorAlert","timeout","setTimeout","clearTimeout","useErrorAlert","prevError","showPassword","setShowPassword","onFormSubmit","emailPasswordAuth","registerUser","emailPassword","handleAuthenticationError","maxWidth","Card","onSubmit","e","preventDefault","formData","FormData","Object","fromEntries","entries","gutterBottom","TextField","name","label","Boolean","helperText","type","InputProps","endAdornment","InputAdornment","position","IconButton","aria-label","onClick","onMouseDown","Button","err","handleUnknownError","console","warn","statusCode","useCollection","cluster","db","collection","mongoClient","withStyles","secondaryAction","paddingRight","ListItem","colors","green","500","A400","purple","orange","red","themeConfig","palette","primary","secondary","theme","createMuiTheme","ThemeProvider","Box","AccountPage","currentUserJSON","JSON","stringify","userdata","parse","Grid","container","spacing","item","xs","md","lg","CardContent","sx","fontSize","data","CardActions","CardMedia","height","image","alt","mb","useCourses","courses","setCourses","loading","setLoading","courseCollection","dataSourceName","find","then","fetchedCourses","getCourse","c","String","_id","ListOfCourses","map","course","margin","CardActionArea","description","AllCourses","filteredCourses","onChange","newValue","query","length","searchStr","toLowerCase","trim","filtered","filter","includes","doSomethingWith","onCancelSearch","socket","ChatPage","messages","setMessages","msgInput","setMsgInput","socketIOClient","window","location","origin","transports","emit","on","temp","push","el","document","getElementById","scrollTop","scrollHeight","off","msg","user","Chip","content","Date","time","toLocaleTimeString","split","action","event","autocomplete","placeholder","useModules","modules","setModules","moduleCollection","fetchedModules","getModule","m","useCourseEnrollment","enrollments","setCourseEnrollment","enrollmentCollection","fetchedCourseEnrollment","dropCourse","deleteOne","_partition","courseId","enrollCourse","insertOne","ObjectID","startDate","isEnrolled","findIndex","getUserEnrollments","useUserModules","userModules","setUserModules","userModuleCollection","fetchedUserModules","makeAttempt","attempt","findOne","moduleId","previous","score","bestScore","updateOne","lastAttempt","Math","round","getUserAttempts","getAttempt","ModuleCard","display","flexDirection","CardHeader","avatar","Avatar","backgroundColor","yellow","grey","title","module","subheader","toLocaleDateString","flexGrow","noWrap","size","CourseModulesPage","modulesLoading","setCourse","useParams","userEnrolled","courseModules","completeModules","thisCourse","enrollAction","confirm","reload","justifyContent","CircularProgress","i","sm","DisplayCourses","progress","cModules","attempts","isNaN","width","mr","LinearProgress","borderRadius","minWidth","HomePage","myCourses","profile","marginRight","cursor","slice","Fab","interests","InterestName","InterestImage","InterestCard","add","remove","isSelected","setIsSelected","DisplayAllCards","userInterests","addInterest","log","removeInterest","element","nextButtonStyle","top","right","bottom","left","NextButton","InterestsPage","LearningLogPage","events","completionDate","start","end","allDay","bgColor","concat","BigCalendar","momentLocalizer","moment","takeQuizButtonStyle","TakeQuizButton","mId","ModulePage","setModule","thisModule","QuestionCard","BlueRadio","root","checked","Radio","cardQuestion","prompt","RadioGroup","radioChangeHandler","options","answer","FormControlLabel","control","replace","userAnswersArray","DisplayQuizQuestions","questions","question","cardNumber","ModuleQuizPage","quizQuestions","setQuizQuestions","quizQuestionCollection","fetchedQuizQuestions","useQuizQuestions","moduleQuestions","q","onSubmitQuiz","numRight","reduce","acc","alert","AppWithRealm","App","AppBar","Toolbar","Chat","CalendarToday","AccountCircle","assign","ExitToApp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"oyBAIA,SAASA,EAAeC,GACtB,OAAO,IAAIC,IAAU,CAAED,KAAIE,cAG7B,IAAMC,EAAkBC,IAAMC,cAAc,MAErC,SAASC,EAAT,GAAgD,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAAY,EAEpBJ,IAAMK,SAASV,EAAeQ,IAFV,mBAE7CG,EAF6C,KAEnCC,EAFmC,KAGpDP,IAAMQ,WAAU,WACdD,EAAYZ,EAAeQ,MAC1B,CAACA,IALgD,MAOdH,IAAMK,SAASC,EAASG,aAPV,mBAO7CA,EAP6C,KAOhCC,EAPgC,KAS9CC,EAAQX,IAAMY,YAAN,uCACZ,WAAOC,GAAP,SAAAC,EAAA,sEACQR,EAASK,MAAME,GADvB,OAEEH,EAAeJ,EAASG,aAF1B,2CADY,sDAKZ,CAACH,IAGGS,EAASf,IAAMY,YAAN,sBAAkB,sBAAAE,EAAA,6EACzBL,QADyB,IACzBA,OADyB,EACzBA,EAAaM,SADY,uBAEzBT,EAASU,WAAWP,GAFK,OAG/BC,EAAeJ,EAASG,aAHO,2CAI9B,CAACH,EAAUG,IAGRQ,EAAkBjB,IAAMkB,SAAQ,WACpC,OAAO,2BAAKZ,GAAZ,IAAsBG,cAAaE,QAAOI,aACzC,CAACT,EAAUG,EAAaE,EAAOI,IAElC,OACE,cAAChB,EAAgBoB,SAAjB,CAA0BC,MAAOH,EAAjC,SACGb,IAKA,SAASiB,IACd,IAAMf,EAAWN,IAAMsB,WAAWvB,GAClC,IAAKO,EACH,MAAM,IAAIiB,MAAJ,yFAIR,OAAOjB,E,uCC9CF,SAASkB,IACd,OACE,cAACC,EAAA,EAAD,CAAYC,UAAU,gBAAgBC,UAAU,KAAKC,QAAQ,KAA7D,SACE,cAAC,IAAD,CAAMC,MAAO,CAAEC,eAAgB,OAAQC,MAAO,SAAWC,GAAG,IAA5D,0BCKN,SAASC,EAAT,GAAqC,IAAb7B,EAAY,EAAZA,SACtB,OACE,cAAC8B,EAAA,EAAD,CACEL,MAAO,CAAEM,UAAW,SAAUC,QAAS,SAAUC,UAAW,QAD9D,SAGGjC,IAKA,SAASkC,IACd,OACE,eAACL,EAAD,WACE,iEDvBuB,MCuBvB,eADF,KACuE,IACrE,cAACM,EAAA,EAAD,CAAMC,OAAO,SAASC,KAAK,iCAA3B,sBAON,SAAuB3C,EAAS4C,GAE9B,IAAMC,EAAc,IAAIC,IAAI9C,GAAS+C,SAC/BC,EAAWC,IAAKC,KAAKL,EAAaD,GACjC,IAAIE,IAAIE,EAAUhD,GAAS2C,KAGhBQ,CAAcC,IAAQ,oB,YC1C7BC,EAAgB,SAACC,GAAD,OAAWA,GAkCjC,I,SC/BP,SAASC,EAAMC,GACb,OAAO,cAAC,IAAD,aAAUC,UAAW,EAAG3B,QAAQ,UAAa0B,IAG/C,SAASE,EAAT,GAA8D,IAAxCC,EAAuC,EAAvCA,OAAQC,EAA+B,EAA/BA,QAA+B,IAAtBC,eAAsB,MAAZ,aAAY,EAClE,OAAOF,EACL,cAAC,EAAD,CAAOE,QAASA,EAASC,SAAS,QAAlC,SACGF,IAED,K,YCOC,SAASG,IAAe,IAAD,IACtBvD,EAAWe,IACXyC,EAAWC,cAFW,EAII/D,IAAMK,UAAS,GAJnB,mBAIrB2D,EAJqB,KAIXC,EAJW,KAUtBC,EAAW,CACfC,MAAO,KACPC,SAAU,KACVC,MAAO,MAbmB,EAeFrE,IAAMK,SAAS6D,GAfb,mBAerBI,EAfqB,KAedC,EAfc,KAgBtBC,EAAc,kBAAMD,EAASL,IAC7BO,EDrBD,YAA4D,IAAnCH,EAAkC,EAAlCA,MAAOI,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,YAAe,EACpB3E,IAAMK,UAAS,GADK,mBACzDuE,EADyD,KACzCC,EADyC,KAE1DC,EAAkB9E,IAAMY,aAAY,WACxC8D,IACAG,GAAkB,KACjB,CAACH,IAkBJ,OAhBA1E,IAAMQ,WAAU,WACd,GAAI8D,GAEF,GADAO,GAAkB,GACdF,EAAa,CACf,IAAMI,EAAUC,YAAW,WACzBF,MACCH,GACH,OAAO,WACLM,aAAaF,UAIjBF,GAAkB,KAEnB,CAACP,EAAOQ,EAAiBH,IAErB,kBACL,cAACnB,EAAD,CACEC,OAAQmB,EACRlB,QAASY,EACTX,QAAS,WACPmB,QCPoBI,CAAc,CACtCZ,MAAOA,EAAMD,MACbK,WAAY,WACVH,GAAS,SAACY,GAAD,mBAAC,eAAoBA,GAArB,IAAgCd,MAAO,aApBxB,EAwBYrE,IAAMK,UAAS,GAxB3B,mBAwBrB+E,EAxBqB,KAwBPC,EAxBO,KA2BtBC,EAAY,uCAAG,+BAAAxE,EAAA,yDAASqD,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,SACnCI,IADmB,UAGbR,EAHa,gCAIT1D,EAASiF,kBAAkBC,aAAarB,EAAOC,GAJtC,OAKfN,EAAS,cALM,uBAOXxD,EAASK,MAAMd,IAAkB4F,cAActB,EAAOC,IAP3C,yDASjBsB,EAA0B,EAAD,GAAMnB,GATd,0DAAH,sDAalB,OACE,eAACrC,EAAA,EAAD,CAAWyD,SAAS,KAAKjE,UAAU,iBAAnC,UACE,cAACkE,EAAA,EAAD,CAAMlE,UAAU,YAAYE,QAAQ,WAApC,SACE,uBACEF,UAAU,YACVmE,SAAU,SAACC,GACTA,EAAEC,iBACF,IAAMC,EAAW,IAAIC,SAASH,EAAEtD,QAFjB,EAGa0D,OAAOC,YAAYH,EAASI,WAAhDjC,EAHO,EAGPA,MAAOC,EAHA,EAGAA,SACfkB,EAAa,CAAEnB,QAAOC,cAN1B,UASE,cAAC3C,EAAA,EAAD,CAAYE,UAAU,KAAKC,QAAQ,KAAKyE,cAAY,EAApD,SACGrC,EAAW,UAAY,WAE1B,cAACS,EAAD,IACA,cAAC6B,EAAA,EAAD,CACE1G,GAAG,cACH2G,KAAK,QACLC,MAAM,gBACN5E,QAAQ,WACR0C,MAAOmC,QAAQnC,EAAMH,OACrBuC,WAAU,UAAEpC,EAAMH,aAAR,QAAiB,KAE7B,cAACmC,EAAA,EAAD,CACE1G,GAAG,iBACH+G,KAAMvB,EAAe,OAAS,WAC9BmB,KAAK,WACLC,MAAM,WACN5E,QAAQ,WACR0C,MAAOmC,QAAQnC,EAAMF,UACrBsC,WAAU,UAAEpC,EAAMF,gBAAR,QAAoB,GAC9BwC,WAAY,CACVC,aACE,cAACC,EAAA,EAAD,CAAgBC,SAAS,MAAzB,SACE,cAACC,EAAA,EAAD,CACEC,aAAW,6BACXC,QApDS,kBAAM7B,EAAgBlC,IAqD/BgE,YAAa,SAACrB,GACZA,EAAEC,kBAJN,SAOGX,EAAe,cAAC,IAAD,IAAiB,cAAC,IAAD,WAM3C,cAACgC,EAAA,EAAD,CAAQT,KAAK,SAAS/E,QAAQ,YAAYG,MAAM,UAAhD,SACGiC,EAAW,iBAAmB,WAEjC,wBACE2C,KAAK,SACLjF,UAAU,cACVwF,QAAS,kBAxFjB1C,SACAP,EAAYd,IAoFN,SAKGa,EACG,kCACA,gCAIV,cAAC1B,EAAD,OAKN,SAASoD,EAA0B2B,EAAK9C,GACtC,IAAM+C,EAAqB,WACzB/C,GAAS,SAACY,GAAD,mBAAC,eACLA,GADI,IAEPd,MAAO,wDAETkD,QAAQC,KACN,mGAEFD,QAAQjD,MAAM+C,IAEhB,GAAIA,aAAexH,IAAyB,CAAC,IACnCyE,EAAsB+C,EAAtB/C,MAAOmD,EAAeJ,EAAfI,WAEf,OADkBnD,GAASmD,GAEzB,IAAK,mBACHlD,GAAS,SAACY,GAAD,mBAAC,eACLA,GADI,IAEPhB,MAAO,8BAET,MACF,IAAK,4BACL,IAAK,mBACL,KAAK,IACHI,GAAS,SAACY,GAAD,mBAAC,eACLA,GADI,IAEPf,SAAU,2BAEZ,MACF,IAAK,sBACL,KAAK,IACHG,GAAS,SAACY,GAAD,mBAAC,eACLA,GADI,IAEPhB,MAAO,oCAET,MACF,IAAK,gDACL,KAAK,IACHI,GAAS,SAACY,GAAD,mBAAC,eACLA,GADI,IAEPf,SAAU,sDAEZ,MACF,QACEkD,UAIJA,I,yCClKG,SAASI,EAAT,GAAuE,IAAD,IAA7CC,eAA6C,MAAnC,gBAAmC,EAAlBC,EAAkB,EAAlBA,GAAIC,EAAc,EAAdA,WACvDvH,EAAWe,IACjB,OAAOrB,IAAMkB,SAAQ,WAEnB,OADYZ,EAASG,YAAYqH,YAAYH,GAClCC,GAAGA,GAAIC,WAAWA,KAC5B,CAACvH,EAASG,YAAakH,EAASC,EAAIC,I,6DCLDE,aAAW,CACjDC,gBAAiB,CACfC,aAAc,UAFsBF,CAIrCG,K,gECdUC,GAAS,CACpBC,MAAM,2BACDA,MADA,IAEHC,IAAK,UACLC,KAAM,YAERC,OAAO,2BACFA,MADC,IAEJF,IAAK,UACLC,KAAM,YAERE,YACAC,UCRIC,GAAc,CAClBC,QAAS,CACPC,QAAST,GAAOI,OAChBM,UAAWV,GAAOI,SAIhBO,GAAQC,aAAeL,IAEtB,SAASM,GAAT,GAAsC,IAAb5I,EAAY,EAAZA,SAC9B,OAAO,cAAC,KAAD,CAAkB0I,MAAOA,GAAzB,SAAiC1I,I,kFCDrC6I,GAAA,EAMU,SAASC,KAAe,IAC3BzI,EAAgBY,IAAhBZ,YAEJ0I,EAAgBC,KAAKC,UAAU5I,GAC/B6I,EAASF,KAAKG,MAAMJ,GACxB,OACI,qBAAKtH,MAAO,CAAEO,QAAS,IAAvB,SACA,eAACoH,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACA,cAACF,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAA7B,SACI,cAAClE,EAAA,EAAD,CAAMrC,UAAW,EAAjB,SACI,eAACwG,GAAA,EAAD,WACI,cAACtI,EAAA,EAAD,CAAYuI,GAAI,CAAEC,SAAU,IAAMlI,MAAM,iBAAiBsE,cAAY,EAArE,mBAGA,cAAC5E,EAAA,EAAD,CAAYG,QAAQ,KAAKD,UAAU,MAAnC,SACC2H,EAAQ,QAAYY,KAAK/F,eAKlC,cAACqF,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAA7B,SACA,eAAClE,EAAA,EAAD,CAAMrC,UAAW,EAAjB,UACI,eAACwG,GAAA,EAAD,WACI,cAACtI,EAAA,EAAD,CAAYuI,GAAI,CAAEC,SAAU,IAAMlI,MAAM,iBAAiBsE,cAAY,EAArE,sBAGA,cAAC5E,EAAA,EAAD,CAAYG,QAAQ,KAAKD,UAAU,MAAnC,uBAKJ,cAACwI,GAAA,EAAD,SAKJ,cAACX,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAA7B,SACA,eAAClE,EAAA,EAAD,CAAMrC,UAAW,EAAjB,UACI,eAACwG,GAAA,EAAD,WACI,cAACtI,EAAA,EAAD,CAAYuI,GAAI,CAAEC,SAAU,IAAMlI,MAAM,iBAAiBsE,cAAY,EAArE,qBAGA,cAAC5E,EAAA,EAAD,CAAYG,QAAQ,KAAKD,UAAU,MAAnC,kBAGA,cAACyI,GAAA,EAAD,CACIzI,UAAU,MACV0I,OAAO,MACPC,MAAM,8GACNC,IAAI,gBAGZ,cAACJ,GAAA,EAAD,SAIJ,cAACX,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAA7B,SACA,eAAClE,EAAA,EAAD,CAAMrC,UAAW,EAAjB,UACI,eAACwG,GAAA,EAAD,WACI,cAACtI,EAAA,EAAD,CAAYuI,GAAI,CAAEC,SAAU,IAAMlI,MAAM,iBAAiBsE,cAAY,EAArE,oBAGA,cAACW,EAAA,EAAD,CAAYC,aAAW,QAAvB,SACQ,cAAC,KAAD,MAGR,cAACmD,GAAA,EAAD,CACIzI,UAAU,MACV0I,OAAO,MACPC,MAAM,6MACNC,IAAI,cAIZ,cAACJ,GAAA,EAAD,SAIJ,cAACX,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAA7B,SACA,eAAClE,EAAA,EAAD,CAAMrC,UAAW,EAAjB,UACI,eAACwG,GAAA,EAAD,WACI,cAACtI,EAAA,EAAD,CAAYuI,GAAI,CAAEC,SAAU,IAAMlI,MAAM,iBAAiBsE,cAAY,EAArE,yBAGA,cAAC5E,EAAA,EAAD,CAAYG,QAAQ,KAAKD,UAAU,MAAnC,6BAIJ,cAACwI,GAAA,EAAD,SAMJ,cAACX,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAA7B,SACA,eAAClE,EAAA,EAAD,CAAMrC,UAAW,EAAjB,UACI,eAACwG,GAAA,EAAD,WACI,cAACtI,EAAA,EAAD,CAAYuI,GAAI,CAAEC,SAAU,IAAMlI,MAAM,iBAAiBsE,cAAY,EAArE,sBAGA,cAAC5E,EAAA,EAAD,CAAYG,QAAQ,KAAKD,UAAU,MAAnC,wBAGA,cAACF,EAAA,EAAD,CAAYuI,GAAI,CAAEQ,GAAI,IAAOzI,MAAM,eAAnC,iCAOJ,cAACoI,GAAA,EAAD,c,wDC3HT,SAASM,KAEKpJ,IAAjB,IAFyB,EAGKrB,IAAMK,SAAS,IAHpB,mBAGlBqK,EAHkB,KAGTC,EAHS,OAIK3K,IAAMK,UAAS,GAJpB,mBAIlBuK,EAJkB,KAITC,EAJS,KAOnBC,EAAmBpD,EAAc,CACnCC,QAASoD,IACTnD,GAAI,aACJC,WAAY,WAIhB7H,IAAMQ,WAAU,WACZsK,EAAiBE,KAAK,IAAIC,MAAK,SAACC,GAC5BP,EAAWO,GACXL,GAAW,QAEhB,CAACC,IAYJ,MAAO,CACHF,UACAF,UACAS,UAPc,SAACvL,GACf,OAAO8K,EAAQM,MAAK,SAAAI,GAAC,OAAIC,OAAOD,EAAEE,OAASD,OAAOzL,QCtB1D,IAAM2L,GAAgB,SAAAjI,GAElB,OAAOA,EAAMoH,QAAQc,KAAI,SAAAC,GACrB,OACI,cAAC,IAAD,CAAMzJ,GAAE,0BAAqByJ,EAAOH,KAAO5J,UAAU,QAArD,SAEI,cAACkE,EAAA,EAAD,CAAM/D,MAAO,CAAEwI,OAAQ,IAAKqB,OAAQ,GAAK1B,GAAI,CAAErE,SAAU,KAAzD,SACI,eAACgG,GAAA,EAAD,WACI,cAACvB,GAAA,EAAD,CACIzI,UAAU,MACV0I,OAAO,MACPC,MAAOmB,EAAOnB,MACdC,IAAI,eAER,eAACR,GAAA,EAAD,WACI,cAACtI,EAAA,EAAD,CAAY4E,cAAY,EAACzE,QAAQ,KAAKD,UAAU,MAAhD,SACK8J,EAAOlF,OAEZ,cAAC9E,EAAA,EAAD,CAAYM,MAAM,iBAAlB,SACK0J,EAAOG,iBAGhB,cAAC5E,EAAA,EAAD,CAAYC,aAAW,mBAAvB,SACI,cAAC,KAAD,MAEJ,cAACD,EAAA,EAAD,CAAYC,aAAW,QAAvB,SACI,cAAC,KAAD,iBAab,SAAS4E,KAAc,IAAD,EAEJpB,KAArBC,EAFyB,EAEzBA,QAFyB,KAEhBE,QACqBvK,mBAAS,KAHd,mBAG1ByL,EAH0B,KAGTnB,EAHS,KAKjCnK,qBAAU,WACNmK,EAAWD,KACZ,CAACA,IAYJ,OAEI,eAACxI,EAAA,EAAD,CAAWR,UAAU,iBAArB,UACI,gCACI,6CACA,cAAC,KAAD,CACIqK,SAAU,SAACC,GAAD,OAhBF,SAACC,GACrB,GAAIA,EAAMC,OAAQ,CACd,IAAIC,EAAYF,EAAMG,cAAcC,OAChCC,EAAW5B,EAAQ6B,QAAO,SAAAnB,GAAC,OAAIA,EAAE7E,KAAK6F,cAAcI,SAASL,MACjExB,EAAW2B,QAEX3B,EAAWD,GAUqB+B,CAAgBT,IACxCU,eAAgB,kBAAM/B,EAAWD,SAGzC,8BACI,cAAC,GAAD,CAAeA,QAASoB,S,wBC7EpCa,I,OAAS,MAEE,SAASC,KAAY,IACxBnM,EAAgBY,IAAhBZ,YADuB,EAECJ,mBAAS,IAFV,mBAExBwM,EAFwB,KAEdC,EAFc,OAGCzM,mBAAS,IAHV,mBAGxB0M,EAHwB,KAGdC,EAHc,KAM/BxM,qBAAU,WAYN,OAXc,MAAVmM,KACAA,GAASM,aAAeC,OAAOC,SAASC,OAAQ,CAAEC,WAAY,CAAC,gBAEnEV,GAAOW,KAAK,YAAa7M,GACzBkM,GAAOY,GAAG,gBAAgB,SAACrD,GACvB,IAAIsD,EAAOX,EACXW,EAAKC,KAAKvD,GACV4C,EAAY,YAAIU,IAChB,IAAME,EAAKC,SAASC,eAAe,aACnCF,EAAGG,UAAYH,EAAGI,gBAEf,WACHnB,GAAOW,KAAK,aAAc7M,GAC1BkM,GAAOoB,IAAI,mBAGhB,IAaH,OACI,gCACI,qBAAKrM,UAAU,WAAW9B,GAAG,YAA7B,SAEQiN,EAASrB,KAAI,SAAAwC,GACT,OAAIA,EAAIC,KAAKrO,IAAMa,EAAYb,GAEvB,sBAAK8B,UAAU,6BAAf,UACI,cAACwM,GAAA,EAAD,CAAMxM,UAAU,YAAYK,MAAM,UAAUyE,MAAQwH,EAAIG,UAAW,uBACnE,gCAAS,IAAIC,KAAKJ,EAAIK,MAAMC,0BAGd,MAAfN,EAAIC,KAAKrO,IAA+B,UAAjBoO,EAAIC,KAAK1H,KAEnC,qBAAK7E,UAAU,eAAeG,MAAO,CAACM,UAAW,UAAjD,SACM6L,EAAIG,UAKV,sBAAKzM,UAAU,eAAf,UACI,gCAASsM,EAAIC,KAAK1H,KAAKgI,MAAM,KAAK,KAAY,uBAC9C,cAACL,GAAA,EAAD,CAAMnM,MAAM,YAAYyE,MAAQwH,EAAIG,UAAiB,uBACrD,gCAAS,IAAIC,KAAKJ,EAAIK,MAAMC,+BAOpD,uBAAM5M,UAAU,YAAY8M,OAAO,GAAG3I,SAzC1B,SAAC4I,GACjBA,EAAM1I,iBACFgH,IACAJ,GAAOW,KAAK,eAAgB,CACxBa,QAASpB,EACTkB,KAAMxN,IAEVuM,EAAY,MAkCZ,UACI,uBAAOtL,UAAU,aAAagN,aAAa,MAAMC,YAAY,8BAA8BvN,MAAO2L,EAAUhB,SAAU,SAAAjG,GAAC,OAAIkH,EAAYlH,EAAEtD,OAAOpB,UAAS,gDCnElK,SAASwN,KAEKvN,IAAjB,IAFyB,EAGKrB,IAAMK,SAAS,IAHpB,mBAGlBwO,EAHkB,KAGTC,EAHS,OAIK9O,IAAMK,UAAS,GAJpB,mBAIlBuK,EAJkB,KAITC,EAJS,KAOnBkE,EAAmBrH,EAAc,CACnCC,QAASoD,IACTnD,GAAI,aACJC,WAAY,WAIhB7H,IAAMQ,WAAU,WACZuO,EAAiB/D,KAAK,IAAIC,MAAK,SAAC+D,GAC5BF,EAAWE,GACXnE,GAAW,QAEhB,CAACkE,IAWJ,MAAO,CACHnE,UACAiE,UACAI,UAPc,SAACrP,GACf,OAAOiP,EAAQ7D,MAAK,SAAAkE,GAAC,OAAI7D,OAAO6D,EAAE5D,OAASD,OAAOzL,Q,yCC3BnD,SAASuP,KAEZ,IAAM7O,EAAWe,IAFiB,EAGSrB,IAAMK,SAAS,IAHxB,mBAG3B+O,EAH2B,KAGdC,EAHc,OAIJrP,IAAMK,UAAS,GAJX,mBAI3BuK,EAJ2B,KAIlBC,EAJkB,KAO5ByE,EAAuB5H,EAAc,CACvCC,QAASoD,IACTnD,GAAI,aACJC,WAAY,qBAIhB7H,IAAMQ,WAAU,WACZ8O,EAAqBtE,KAAK,IAAIC,MAAK,SAACsE,GAChCF,EAAoBE,GACpB1E,GAAW,QAEhB,CAACyE,IAiCJ,MAAO,CACH1E,UACAwE,cACAI,WAtBY,uCAAG,WAAO5P,GAAP,SAAAkB,EAAA,sEACTwO,EAAqBG,UAAU,CAAEC,WAAYpP,EAASG,YAAYb,GAAI+P,SAAU/P,IADvE,2CAAH,sDAuBZgQ,aAnBc,uCAAG,WAAOhQ,GAAP,SAAAkB,EAAA,+EAEPwO,EAAqBO,UAAU,CACjCvE,IAAK,IAAIzL,IAAWiQ,SACpBJ,WAAYpP,EAASG,YAAYb,GACjC+P,SAAU/P,EACVmQ,UAAW,IAAI3B,OANN,sDAUb7G,QAAQjD,MAAR,MAVa,wDAAH,sDAoBd0L,WApCe,SAACpQ,GAChB,OAAOwP,EAAYa,WAAU,SAAAnK,GAAC,OAAIuF,OAAOvF,EAAE6J,YAActE,OAAOzL,IAAOkG,EAAE4J,YAAcpP,EAASG,YAAYb,OAAO,GAoCnHsQ,mBA7BuB,WACvB,OAAOd,EAAY7C,QAAO,SAAAzG,GAAC,OAAIA,EAAE4J,aAAepP,EAASG,YAAYb,QC/BtE,SAASuQ,KAEZ,IAAM7P,EAAWe,IAFY,EAGSrB,IAAMK,SAAS,IAHxB,mBAGtB+P,EAHsB,KAGTC,EAHS,OAICrQ,IAAMK,UAAS,GAJhB,mBAItBuK,EAJsB,KAIbC,EAJa,KAOvByF,EAAuB5I,EAAc,CACvCC,QAASoD,IACTnD,GAAI,aACJC,WAAY,gBAIhB7H,IAAMQ,WAAU,WACZ8P,EAAqBtF,KAAK,IAAIC,MAAK,SAACsF,GAChCF,EAAeE,GACf1F,GAAW,QAEhB,CAACyF,IA2CJ,MAAO,CACH1F,UACAwF,cACAI,YAhCa,uCAAG,WAAOC,GAAP,eAAA3P,EAAA,sEACKwP,EAAqBI,QACtC,CACIhB,WAAYpP,EAASG,YAAYb,GACjC+Q,SAAUF,EAAQE,WAJV,aACZC,EADY,SAMAH,EAAQI,OAASD,EAASE,WAN1B,yCAOLR,EAAqBS,UAAU,CAC9BrB,WAAYpP,EAASG,YAAYb,GACjC+Q,SAAUF,EAAQE,UAEtB,CACIG,UAAWL,EAAQI,MACnBG,YAAa,IAAI5C,KACjBsB,WAAYpP,EAASG,YAAYb,GACjC+Q,SAAUF,EAAQE,YAfd,gCAmBLL,EAAqBT,UAAU,CAClCvE,IAAK,IAAIzL,IAAWiQ,SACpBJ,WAAYpP,EAASG,YAAYb,GACjC+Q,SAAUF,EAAQE,SAClBG,UAAWG,KAAKC,MAAMT,EAAQI,OAC9BG,YAAa,IAAI5C,QAxBT,2CAAH,sDAiCb+C,gBArCoB,WACpB,OAAOf,EAAY7D,QAAO,SAAA2C,GAAC,OAAIA,EAAEQ,aAAepP,EAASG,YAAYb,OAqCrEwR,WA9Ce,SAACT,GAChB,OAAOP,EAAYpF,MAAK,SAAAlK,GAAC,OAAIA,EAAE4O,aAAepP,EAASG,YAAYb,IAAMyL,OAAOvK,EAAE6P,YAActF,OAAOsF,Q,wBCLzGU,GAAa,SAAC/N,GAAW,IAAD,IAZNuN,EAapB,OACI,eAACjL,EAAA,EAAD,CAAMoE,GAAI,CAAEK,OAAQ,OAAQiH,QAAS,OAAQC,cAAe,UAA5D,UACI,cAACC,GAAA,EAAD,CACIC,OACI,cAACC,GAAA,EAAD,CAAQ7P,MAAO,CAAE8P,iBAjBbd,EAiB4C,UAACvN,EAAMmN,eAAP,aAAC,EAAeK,UAhB3ED,EAEMA,GAAS,GACTpI,KAAI,KACJoI,GAAS,GACTe,KAAO,KAEPxJ,KAAM,KANNG,KAAO,OAe4EtB,aAAW,UAAzF,SACI,cAACxF,EAAA,EAAD,CAAYG,QAAQ,UAAU0P,QAAQ,QAAQzP,MAAO,CAAEE,MAAO8P,KAAK,MAAnE,SAA4EvO,EAAMmN,QAAN,UAAmBnN,EAAMmN,QAAQK,UAAjC,KAAgD,UAGpIgB,MAAOxO,EAAMyO,OAAOxL,KACpByL,UAAW1O,EAAMmN,QAAN,gBAAyBnN,EAAMmN,QAAQO,YAAYiB,qBAAnD,YAA2E3O,EAAMmN,QAAQO,YAAY1C,sBAAyB,eAE7I,cAAClE,GAAA,EAAD,CACIzI,UAAU,MACV0I,OAAO,MACPC,MAAK,wDAAyChH,EAAMmI,cAA/C,aAAyC,EAAclF,KAAvD,YAA+DjD,EAAMyO,OAAOxL,MACjFgE,IAAI,WAER,cAACR,GAAA,EAAD,CAAaC,GAAI,CAAEkI,SAAU,GAA7B,SACI,cAACzQ,EAAA,EAAD,CAAY0Q,QAAM,EAAlB,SACK7O,EAAMyO,OAAOnG,gBAGtB,eAACzB,GAAA,EAAD,WACI,cAAC,IAAD,CAAMnI,GAAE,kBAAasB,EAAMyO,OAAOzG,KAAlC,SACI,cAAClE,EAAA,EAAD,CAAQgL,KAAK,QAAQxQ,QAAQ,YAAYG,MAAM,UAA/C,oBAEJ,cAAC,IAAD,CAAMC,GAAE,uBAAkBsB,EAAMyO,OAAOzG,KAAvC,SACI,eAAClE,EAAA,EAAD,CAAQgL,KAAK,QAAQxQ,QAAQ,YAAYG,MAAM,UAA/C,UAA0DuB,EAAMmN,QAAU,SAAW,OAArF,oBAOL,SAAS4B,KAAqB,IAAD,EAEKzD,KAArBC,GAFgB,EAEhCyD,eAFgC,EAEhBzD,SAASjE,EAFO,EAEPA,QAFO,EAGSuE,KAAzCa,EAHgC,EAGhCA,WAAYJ,EAHoB,EAGpBA,aAAcJ,EAHM,EAGNA,WAHM,EAIJW,KAA5BC,EAJgC,EAIhCA,YAAagB,EAJmB,EAInBA,WACb1G,EAAYD,KAAZC,QALgC,EAMZrK,mBAAS,MANG,mBAMjCoL,EANiC,KAMzB8G,EANyB,KAOhC3S,EAAO4S,cAAP5S,GAEF6S,EAAe,mBAAMhH,GAASuE,EAAWvE,EAAOH,MAEhDoH,EAAgB,kBAAM7D,EAAQtC,QAAO,SAAA2C,GAAC,OAAI7D,OAAO6D,EAAES,YAActE,OAAM,OAACI,QAAD,IAACA,OAAD,EAACA,EAAQH,SAChFqH,EAAkB,kBAAMD,IAAgBnG,QAAO,SAAA2C,GACjD,IAAIuB,EAAUW,EAAWlC,EAAE5D,KAC3B,OAAOmF,GAAWA,EAAQK,WAAa,OAG3CtQ,qBAAU,WACN,IAAIoS,EAAalI,EAAQM,MAAK,SAAAI,GAAC,OAAIC,OAAOD,EAAEE,MAAQ1L,KACpD2S,EAAUK,KACX,CAAClI,EAASmE,EAASuB,IAEtB,IAAMyC,EAAY,uCAAG,sBAAA/R,EAAA,0DACb2R,IADa,oBAEGvF,OAAO4F,QAAQ,0GAFlB,gCAIHtD,EAAU,OAAC/D,QAAD,IAACA,OAAD,EAACA,EAAQH,KAJhB,6CAMPsE,EAAY,OAACnE,QAAD,IAACA,OAAD,EAACA,EAAQH,KANd,OAQjB4B,OAAOC,SAAS4F,SARC,4CAAH,qDAWlB,OAAOnI,EACH,qBAAK/I,MAAO,CAAEyP,QAAS,OAAQ0B,eAAgB,UAA/C,SACI,cAACC,GAAA,EAAD,CAAkBpR,MAAO,CAAEQ,UAAW,WAGtC,eAACH,EAAA,EAAD,CAAWR,UAAU,iBAAiBiE,SAAS,KAA/C,UAEI,eAAClE,EAAA,EAAD,CAAYG,QAAQ,KAAKD,UAAU,MAAnC,iBACK8J,QADL,IACKA,OADL,EACKA,EAAQlF,KACT,cAACa,EAAA,EAAD,CAAQF,QAAS2L,EAAcnR,UAAU,iBAAiBE,QAAQ,WAAWG,MAAO0Q,IAAiB,YAAc,UAAnH,mBAhCSA,IAAiB,OAAS,SAgCnC,gBAIJ,mDAAehH,QAAf,IAAeA,OAAf,EAAeA,EAAQG,eACvB,uBAEA,cAACpC,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,SACKgJ,IAAgBlH,KAAI,SAACuG,EAAQmB,GAC1B,IAAIzC,EAAUW,EAAWW,EAAOzG,KAChC,IAAKmF,GAAWA,EAAQK,UAAY,GAChC,OACI,cAACtH,GAAA,EAAD,CAAMG,MAAI,EAASC,GAAI,GAAIuJ,GAAI,EAAGtJ,GAAI,EAAtC,SACI,cAAC,GAAD,CAAY4B,OAAQA,EAAQsG,OAAQA,EAAQtB,QAASA,KADzCyC,QAQhC,8BAEQP,IAAkBzG,OAAS,EACvB,gCACI,uBACA,cAACzK,EAAA,EAAD,CAAYG,QAAQ,KAAKD,UAAU,MAAnC,uBAGA,cAAC6H,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,SACKiJ,IAAkBnH,KAAI,SAACuG,EAAQmB,GAAT,OAGnB,cAAC1J,GAAA,EAAD,CAAMG,MAAI,EAASC,GAAI,GAAIuJ,GAAI,EAAGtJ,GAAI,EAAtC,SACI,cAAC,GAAD,CAAY4B,OAAQA,EAAQsG,OAAQA,EAAQtB,QAASW,EAAWW,EAAOzG,QAD3D4H,WAQ1B,U,cC3HxBE,I,OAAiB,SAAA9P,GAAU,IAErBuL,EAAYD,KAAZC,QACAuC,EAAejB,KAAfiB,WAER,OAAO9N,EAAMoH,QAAQc,KAAI,SAAAC,GAErB,IAAI4H,EAAW,EACf,GAAI/P,EAAM0M,WAAY,CAClB,IAAIsD,EAAWzE,EAAQtC,QAAO,SAAA2C,GAAC,OAAI7D,OAAO6D,EAAES,YAActE,OAAOI,EAAOH,QACpEiI,EAAWD,EAAS9H,KAAI,SAAA0D,GAAC,OAAIkC,EAAWlC,EAAE5D,QAC9C+H,EAAWpC,KAAKC,MAAOqC,EAAShH,QAAO,SAAAzL,GAAC,OAAIA,GAAKA,EAAEgQ,WAAa,MAAI5E,OAASoH,EAASpH,OAAU,KAKpG,OAFIsH,MAAMH,KAAWA,EAAW,GAG5B,eAAC,IAAD,CAAMrR,GAAE,yBAAoByJ,EAAOH,KAAO5J,UAAU,cAAcG,MAAO,CAAEC,eAAgB,QAA3F,UACI,cAAC8D,EAAA,EAAD,CAAM/D,MAAO,CAAEwI,OAAQ,IAAKqB,OAAQ,GAAK1B,GAAI,CAAErE,SAAU,KAAzD,SACI,eAACgG,GAAA,EAAD,WACI,cAACvB,GAAA,EAAD,CACIzI,UAAU,MACV0I,OAAO,MACPC,MAAOmB,EAAOnB,MACdC,IAAI,iBAER,eAACR,GAAA,EAAD,WACI,cAACtI,EAAA,EAAD,CAAY4E,cAAY,EAACzE,QAAQ,KAAKD,UAAU,MAAhD,SACK8J,EAAOlF,OAEXjD,EAAM0M,WAAa,KAChB,cAACvO,EAAA,EAAD,CAAY0Q,QAAM,EAACvQ,QAAQ,QAAQG,MAAM,iBAAzC,SACK0J,EAAOG,sBAK3BtI,EAAM0M,WAAa,eAAC/G,GAAA,EAAD,CAAKe,GAAI,CAAEsH,QAAS,QAAUzP,MAAO,CAAEO,QAAS,GAAhD,UAChB,cAAC6G,GAAA,EAAD,CAAKe,GAAI,CAAEyJ,MAAO,MAAOC,GAAI,GAA7B,SACI,cAACC,EAAA,EAAD,CAAgBC,aAAa,IAAIhS,QAAQ,cAAcR,MAAOiS,MAElE,cAACpK,GAAA,EAAD,CAAKe,GAAI,CAAE6J,SAAU,GAAIlO,SAAU,KAAnC,SACI,cAAClE,EAAA,EAAD,CAAYG,QAAQ,QAAQG,MAAM,iBAAlC,mBAAuDkP,KAAKC,MAAMmC,GAAlE,YAEC,aAMV,SAASS,KAEpB,IAAMxT,EAAWe,IAFc,EAIFoJ,KAArBC,EAJuB,EAIvBA,QAASE,EAJc,EAIdA,QACToF,EAAeb,KAAfa,WAEF+D,EAAY,kBAAMrJ,EAAQ6B,QAAO,SAAAnB,GAAC,OAAI4E,EAAW5E,EAAEE,SAEzD,OAAOV,EACH,qBAAK/I,MAAO,CAAEyP,QAAS,OAAQ0B,eAAgB,UAA/C,SACI,cAACC,GAAA,EAAD,CAAkBpR,MAAO,CAAEQ,UAAW,WAGtC,sBAAKX,UAAU,eAAf,UACI,4CACA,qBAAKA,UAAU,qBAAf,SAESqS,IAAY7H,OAaT,cAAC,GAAD,CAAgBxB,QAASqJ,IAAa/D,YAAY,IAZlD,sBAAKnO,MAAO,CAAEM,UAAW,SAAUsR,MAAO,QAA1C,UACI,cAACvF,GAAA,EAAD,CAAMtM,QAAQ,WAAWG,MAAM,UAAUyE,MACjC,cAAC/E,EAAA,EAAD,CAAYG,QAAQ,KAAKD,UAAU,MAAnC,4BACiBrB,EAASG,YAAYuT,QAAQ7P,MAAMoK,MAAM,KAAK,GAD/D,SAKR,cAAC9M,EAAA,EAAD,CAAYG,QAAQ,YAAYyE,cAAY,EAAC1E,UAAU,MAAvD,yLAQhB,sBAAK/B,GAAG,8BAAR,UACI,6CACA,cAAC,IAAD,CAAMoC,GAAG,eAAT,SACI,mBAAGH,MAAO,CAAEoS,YAAa,GAAIC,OAAQ,WAArC,SAAkD,sDAG1D,qBAAKxS,UAAU,sBAAf,SACI,cAAC,GAAD,CAAgBgJ,QAASA,EAAQ6B,QAAO,SAAAnB,GAAC,OAAK4E,EAAW5E,EAAEE,QAAM6I,MAAM,EAAG,GAAInE,YAAY,MAE9F,cAAC,IAAD,CAAMhO,GAAG,QAAT,SACI,cAACoS,GAAA,EAAD,CAAKrS,MAAM,UAAUL,UAAU,cAAcE,QAAQ,WAArD,SACI,mD,WCpGpByS,GAAY,CACZ,CACIC,aAAc,aACdC,cAAe,yDAEnB,CACID,aAAc,QACdC,cAAe,2DAEnB,CACID,aAAc,cACdC,cAAe,yDAEnB,CACID,aAAc,QACdC,cAAe,2DAEnB,CACID,aAAc,UACdC,cAAe,2DAEnB,CACID,aAAc,kBACdC,cAAe,yDAEnB,CACID,aAAc,UACdC,cAAe,2DAGnB,CACID,aAAc,UACdC,cAAe,4DAIvB,SAASC,GAAalR,GAAQ,IAClBiD,EAA6BjD,EAA7BiD,KAAM+D,EAAuBhH,EAAvBgH,MAAOmK,EAAgBnR,EAAhBmR,IAAKC,EAAWpR,EAAXoR,OADD,EAGW1U,YAAe,GAH1B,mBAGlB2U,EAHkB,KAGNC,EAHM,KAiBzB,OACI,cAACpL,GAAA,EAAD,CAAMG,MAAI,EAAkBC,GAAI,GAAIuJ,GAAI,EAAGtJ,GAAI,EAA/C,SACI,cAACjE,EAAA,EAAD,CAAMsB,QAdd,WAEQyN,GACAC,GAAc,GACdF,EAAOnO,KAGPqO,GAAc,GACdH,EAAIlO,KAMiB1E,MAAO,CAAE8P,gBAAiBgD,EAAapM,KAAO,KAAO,WAAa3G,QAAQ,WAA/F,SACI,eAAC+J,GAAA,EAAD,WACI,cAACvB,GAAA,EAAD,CACIzI,UAAU,MACV0I,OAAO,MACPC,MAAOA,IAEX,cAACP,GAAA,EAAD,CACIM,OAAO,KADX,SAGI,mBAAGxI,MAAO,CAAEM,UAAW,UAAvB,SAAoCoE,YAXpCjD,EAAMiD,MAmB9B,SAASsO,KACL,IAAIC,EAAgB,GAEpB,SAASC,EAAYxO,GACjBuO,EAAcrH,KAAKlH,GACnBgB,QAAQyN,IAAIF,GAIhB,SAASG,EAAe1O,GACpBuO,EAAgBA,EAAcvI,QAAO,SAAAzG,GAAC,OAAIA,IAAMS,KAChDgB,QAAQyN,IAAIF,GAIhB,OACIT,GAAU7I,KAAI,SAAA0J,GACV,OACI,cAACV,GAAD,CAAcjO,KAAM2O,EAAQZ,aAAchK,MAAO4K,EAAQX,cAAeE,IAAKM,EAAaL,OAAQO,OAQlH,IAAME,GAAkB,CACpBvB,aAAc,GACdxR,QAAS,GACTsJ,OAAQ,GACR0J,IAAK,OACLC,MAAO,GACPC,OAAQ,GACRC,KAAM,OACNxO,SAAU,SAId,SAASyO,KAEL,IAAM1R,EAAWC,cAMjB,OACI,cAACqQ,GAAA,EAAD,CAAK1S,UAAU,aACX0Q,KAAK,QACLrQ,MAAM,UACNH,QAAQ,YACRC,MAAOsT,GACPjO,QAVS,WACbpD,EAAS,MAIT,kBAYO,SAAS2R,KACpB,OACI,eAACvT,EAAA,EAAD,CAAWR,UAAU,iBAAiBiE,SAAS,KAA/C,UACI,qBAAK9D,MAAO,CAAEM,UAAW,UAAzB,SACI,cAACV,EAAA,EAAD,CAAYG,QAAQ,KAAKyE,cAAY,EAAC1E,UAAU,MAAhD,qCAIJ,cAAC6H,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,SACI,cAACmL,GAAD,MAEJ,cAACW,GAAD,O,uDCjJG,SAASE,KAAmB,IAE/BxF,EAAuBf,KAAvBe,mBACAiB,EAAoBhB,KAApBgB,gBACAhG,EAAcV,KAAdU,UACA8D,EAAcL,KAAdK,UAEF0G,EAASzF,IAAqB1E,KAAI,SAAA1F,GACpC,GAAIA,EAAE8P,eAAgB,CAClB,IAAInK,EAASN,EAAUrF,EAAE6J,UACzB,MAAO,CACHmC,MAAM,GAAD,cAAKrG,QAAL,IAAKA,OAAL,EAAKA,EAAQlF,KAAb,qBACLsP,MAAO/P,EAAE8P,eACTE,IAAKhQ,EAAE8P,gBAAkB,IAAIxH,KAC7B2H,QAAQ,EACRC,QAAU,eAGnBC,OACC9E,IAAkB3F,KAAI,SAAA1K,GAClB,GAAIA,EAAEgQ,WAAahQ,EAAEgQ,WAAa,GAAI,CAClC,IAAIiB,EAAS9C,EAAUnO,EAAE6P,UACzB,MAAO,CACHmB,MAAM,GAAD,cAAKC,QAAL,IAAKA,OAAL,EAAKA,EAAQxL,KAAb,qBACLsP,MAAO/U,EAAEkQ,YACT8E,IAAKhV,EAAEkQ,YACP+E,QAAQ,EACRC,QAAU,gBAO1B,OAFAzO,QAAQyN,IAAIW,GAGR,cAAC,KAAD,CAAaA,OAAQA,IArC7BO,KAAYC,gBAAgBC,M,WCDtBC,GAAsB,CACxBzC,aAAc,GACdxR,QAAS,GACTsJ,OAAQ,GACR0J,IAAK,OACLC,MAAO,GACPC,OAAQ,GACRC,KAAM,OACNxO,SAAU,SAId,SAASuP,GAAehT,GAEpB,OACI,cAAC,IAAD,CAAMtB,GAAE,uBAAkBsB,EAAMiT,KAAhC,SACI,cAACnC,GAAA,EAAD,CAAK1S,UAAU,iBACX0Q,KAAK,QACLrQ,MAAM,UACNH,QAAQ,YACRC,MAAOwU,GAJX,yBAaG,SAASG,KAAc,IAC1B5W,EAAO4S,cAAP5S,GACAiP,EAAYD,KAAZC,QAFyB,EAGL7O,aAHK,mBAG1B+R,EAH0B,KAGlB0E,EAHkB,KAUjC,OALAzW,aAAgB,WACZ,IAAI0W,EAAa7H,EAAQ7D,MAAK,SAAAkE,GAAC,OAAI7D,OAAO6D,EAAE5D,OAAS1L,KACrD6W,EAAUC,KACX,CAAC7H,IAGA,eAAC3M,EAAA,EAAD,WACI,qBAAKR,UAAU,sBAAf,SACI,oCAAKqQ,QAAL,IAAKA,OAAL,EAAKA,EAAQxL,SAEjB,oCAAKwL,QAAL,IAAKA,OAAL,EAAKA,EAAQnG,cACb,mCAAImG,QAAJ,IAAIA,OAAJ,EAAIA,EAAQ5D,UACZ,cAACmI,GAAD,CAAgBC,IAAG,OAAExE,QAAF,IAAEA,OAAF,EAAEA,EAAQzG,S,yCCP1BqL,I,OApCM,SAAArT,GACjB,IAAMsT,EAAY7O,aAAW,CACzB8O,KAAM,CACF9U,MAAO,WACP,YAAa,CACTA,MAAO,YAGf+U,QAAS,IAPK/O,EAQf,SAACzE,GAAD,OAAW,cAACyT,GAAA,EAAD,aAAOhV,MAAM,WAAcuB,OAEzC,OACI,cAACsC,EAAA,EAAD,CAAMlE,UAAU,gBAAhB,SACI,eAACqI,GAAA,EAAD,WACI,cAACtI,EAAA,EAAD,UACK6B,EAAM0T,aAAaC,SAEI,MAA3B3T,EAAM0T,aAAarQ,KAAe,cAACuQ,GAAA,EAAD,CAAYnL,SAAUzI,EAAM6T,mBAA5B,SAC9B7T,EAAM0T,aAAaI,QAAQ5L,KAAI,SAAC6L,EAAQnE,GACrC,OACI,cAACoE,GAAA,EAAD,CAEIlW,MAAOiW,EACPE,QAAS,cAACX,EAAD,IACTpQ,MAAO6Q,EAAOG,QAAQ,IAAK,KAHtBtE,QAQjB,cAAC5M,EAAA,EAAD,CAAW1G,GAAG,iBAAiB4G,MAAM,YAAY5E,QAAQ,WAAWmK,SAAUzI,EAAM6T,4BC7BxG,IAAIM,GAAmB,GAOjBC,GAAuB,SAAApU,GACzB,OACI,qBAAK5B,UAAU,YAAf,SACK4B,EAAMqU,UAAUnM,KAAI,SAACoM,EAAU1E,GAC5B,OACI,cAAC,GAAD,CAAsB2E,WAAY3E,EAAG8D,aAAcY,EAAUT,mBAAoB,SAACrR,GAAD,OAVlE2I,EAU+F3I,OAT9H2R,GAS2HvE,GATjGzE,EAAMjM,OAAOpB,OADhB,IAAQqN,IAUIyE,SAOxB,SAAS4E,KAAkB,IAC9BjJ,EAAYD,KAAZC,QACAjP,EAAO4S,cAAP5S,GACFkE,EAAWC,cAETyM,EAAgBL,KAAhBK,YAL6B,ECvBlC,WAEcnP,IAAjB,IAF+B,EAGWrB,IAAMK,SAAS,IAH1B,mBAGxB0X,EAHwB,KAGTC,EAHS,OAIDhY,IAAMK,UAAS,GAJd,mBAIxBuK,EAJwB,KAIfC,EAJe,KAOzBoN,EAAyBvQ,EAAc,CACzCC,QAASoD,IACTnD,GAAI,aACJC,WAAY,iBAWhB,OAPA7H,IAAMQ,WAAU,WACZyX,EAAuBjN,KAAK,IAAIC,MAAK,SAACiN,GAClCF,EAAiBE,GACjBrN,GAAW,QAEhB,CAACoN,IAEG,CACHrN,UACAmN,iBDM+BI,GAA3BJ,EAN6B,EAM7BA,cAAenN,EANc,EAMdA,QANc,EAQTvK,qBARS,mBAQ9B0R,EAR8B,KAQtB0E,EARsB,KAU/B2B,EAAkB,kBAAML,EAAcxL,QAAO,SAAA8L,GAAC,OAAIhN,OAAOgN,EAAE1H,YAActF,OAAM,OAAC0G,QAAD,IAACA,OAAD,EAACA,EAAQzG,SAE9F9K,qBAAU,WACN,IAAIkW,EAAa7H,EAAQ7D,MAAK,SAAAkE,GAAC,OAAI7D,OAAO6D,EAAE5D,OAAS1L,KACrD6W,EAAUC,KACX,CAAC7H,EAASkJ,IAEb,IAAMO,EAAY,uCAAG,gCAAAxX,EAAA,6DACbyX,EAAWH,IAAkBI,QAAO,SAACC,EAAKJ,EAAGnF,GAAT,OAAemF,EAAEhB,OAAOjL,gBAAkBqL,GAAiBvE,IAAM,IAAI9G,gBAAkBqM,EAAMA,IAAK,GACtI5H,EAAS0H,EAAWH,IAAkBlM,OAAU,IACpDwM,MAAM,cAAD,OAAezH,KAAKC,MAAML,GAA1B,MACCJ,EAAU,CACZE,SAAUoB,EAAOzG,IACjBuF,MAAOA,GANM,kBASPL,EAAYC,GATL,OAUb3M,EAAS,mBAAD,OAAoBiO,EAAOpC,WAVtB,kDAYbpI,QAAQyN,IAAR,MAZa,0DAAH,qDAgBlB,OAAOpK,EACH,qBAAK/I,MAAO,CAAEyP,QAAS,OAAQ0B,eAAgB,UAA/C,SACI,cAACC,GAAA,EAAD,CAAkBpR,MAAO,CAAEQ,UAAW,WAGtC,eAACH,EAAA,EAAD,CAAWR,UAAU,iBAArB,UACI,sCAAKqQ,QAAL,IAAKA,OAAL,EAAKA,EAAQxL,KAAb,WACA,sEACA,cAAC,GAAD,CAAsBoR,UAAWS,MACjC,cAAChR,EAAA,EAAD,CAAQF,QAASoR,EAAc5W,UAAU,gBAAgBE,QAAQ,YAAYwQ,KAAK,QAAQrQ,MAAM,UAAhG,uB,OEnDD,SAAS4W,KACtB,OACE,cAAC,GAAD,UACE,cAACzY,EAAD,CAAkBC,MAAOA,IAAzB,SACE,cAAC,GAAD,QAMR,SAASyY,KAAO,IAAD,EACmBvX,IAAxBZ,EADK,EACLA,YAAaM,EADR,EACQA,OACrB,OACE,sBAAKW,UAAU,MAAf,UACE,cAACmX,EAAA,EAAD,CAAQ9R,SAAS,SAAjB,SACE,eAAC+R,EAAA,EAAD,WACE,cAACtX,EAAD,IACCf,EACC,gCACE,cAAC,IAAD,CAAMuB,GAAG,QAAT,SACE,cAACgF,EAAA,EAAD,CAAYjF,MAAM,YAAYkF,aAAW,SAASmL,KAAK,QAAvD,SACE,cAAC2G,EAAA,EAAD,QAGJ,cAAC,IAAD,CAAM/W,GAAG,gBAAT,SACE,cAACgF,EAAA,EAAD,CAAYjF,MAAM,YAAYkF,aAAW,SAASmL,KAAK,QAAvD,SACE,cAAC4G,EAAA,EAAD,QAGJ,cAAC,IAAD,CAAMhX,GAAG,WAAT,SACE,cAACgF,EAAA,EAAD,CAAYjF,MAAM,YAAYkF,aAAW,SAASmL,KAAK,QAAvD,SACE,cAAC6G,EAAA,EAAD,QAIJ,cAACjS,EAAA,EAAD,CACEpF,QAAQ,YACRG,MAAM,YACNmF,QAAO,sBAAE,sBAAApG,EAAA,sEACDC,IADC,OAEPmM,OAAOC,SAAS+L,OAAO,KAFhB,2CAHX,SAQE,cAACC,EAAA,EAAD,SAGF,UAGP1Y,EACC,eAAC,IAAD,WACE,cAAC,IAAD,CAAOsC,KAAK,IAAImS,QAAS,cAAC,GAAD,MACzB,cAAC,IAAD,CAAOnS,KAAK,sBAAsBmS,QAAS,cAAC,GAAD,MAC3C,cAAC,IAAD,CAAOnS,KAAK,WAAWmS,QAAS,cAAC,GAAD,MAChC,cAAC,IAAD,CAAOnS,KAAK,eAAemS,QAAS,cAACrJ,GAAD,MACpC,cAAC,IAAD,CAAO9I,KAAK,QAAQmS,QAAS,cAACtI,GAAD,MAC7B,cAAC,IAAD,CAAO7J,KAAK,aAAamS,QAAS,cAACO,GAAD,MAClC,cAAC,IAAD,CAAO1S,KAAK,gBAAgBmS,QAAS,cAACQ,GAAD,MACrC,cAAC,IAAD,CAAO3S,KAAK,cAAcmS,QAAS,cAAC,GAAD,MACnC,cAAC,IAAD,CAAOnS,KAAK,mBAAmBmS,QAAS,cAAC,GAAD,SAI1C,cAACrR,EAAD,OCpFR,IAYeuV,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBrO,MAAK,YAAkD,IAA/CsO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,GAAD,QAGJnM,SAASC,eAAe,SAM1BwL,O","file":"static/js/main.920a7759.chunk.js","sourcesContent":["import React from \"react\";\r\nimport * as Realm from \"realm-web\";\r\nimport { baseUrl } from \"../realm.json\";\r\n\r\nfunction createRealmApp(id) {\r\n  return new Realm.App({ id, baseUrl });\r\n}\r\n\r\nconst RealmAppContext = React.createContext(null);\r\n\r\nexport function RealmAppProvider({ appId, children }) {\r\n  // Store Realm.App in React state. If appId changes, all children will rerender and use the new realmApp.\r\n  const [realmApp, setRealmApp] = React.useState(createRealmApp(appId));\r\n  React.useEffect(() => {\r\n    setRealmApp(createRealmApp(appId));\r\n  }, [appId]);\r\n  // Store the app's current user in state and wrap the built-in auth functions to modify this state\r\n  const [currentUser, setCurrentUser] = React.useState(realmApp.currentUser);\r\n  // Wrap the base logIn function to save the logged in user in state\r\n  const logIn = React.useCallback(\r\n    async (credentials) => {\r\n      await realmApp.logIn(credentials);\r\n      setCurrentUser(realmApp.currentUser);\r\n    },\r\n    [realmApp]\r\n  );\r\n  // Wrap the current user's logOut function to remove the logged out user from state\r\n  const logOut = React.useCallback(async () => {\r\n    await currentUser?.logOut();\r\n    await realmApp.removeUser(currentUser);\r\n    setCurrentUser(realmApp.currentUser);\r\n  }, [realmApp, currentUser]);\r\n\r\n  // Override the App's currentUser & logIn properties + include the app-level logout function\r\n  const realmAppContext = React.useMemo(() => {\r\n    return { ...realmApp, currentUser, logIn, logOut };\r\n  }, [realmApp, currentUser, logIn, logOut]);\r\n\r\n  return (\r\n    <RealmAppContext.Provider value={realmAppContext}>\r\n      {children}\r\n    </RealmAppContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useRealmApp() {\r\n  const realmApp = React.useContext(RealmAppContext);\r\n  if (!realmApp) {\r\n    throw new Error(\r\n      `No Realm App found. Make sure to call useRealmApp() inside of a <RealmAppProvider />.`\r\n    );\r\n  }\r\n  return realmApp;\r\n}\r\n","import React from \"react\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const API_TYPE_NAME = \"MQL\"\r\n\r\nexport function AppName() {\r\n  return (\r\n    <Typography className=\"app-bar-title\" component=\"h1\" variant=\"h5\">\r\n      <Link style={{ textDecoration: 'none', color: 'unset' }} to=\"/\">LearnlyLog</Link>\r\n    </Typography>\r\n  );\r\n}\r\n","import path from \"path\";\r\nimport { Container, Link } from \"@material-ui/core\";\r\nimport { API_TYPE_NAME } from \"./AppName\";\r\nimport { appUrl } from \"../realm.json\";\r\n\r\nexport function MoreInfo() {\r\n  return (\r\n    <>\r\n      {API_TYPE_NAME === \"GraphQL\" ? <MoreInfoGraphiQL /> : null}\r\n      <MoreInfoTemplateAndDocs />\r\n    </>\r\n  );\r\n}\r\n\r\nfunction MoreInfoItem({ children }) {\r\n  return (\r\n    <Container\r\n      style={{ textAlign: \"center\", padding: \"14px 0\", marginTop: \"auto\" }}\r\n    >\r\n      {children}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport function MoreInfoTemplateAndDocs() {\r\n  return (\r\n    <MoreInfoItem>\r\n      <span>Built with the MongoDB Realm {API_TYPE_NAME} Template</span> |{\" \"}\r\n      <Link target=\"_blank\" href=\"https://docs.mongodb.com/realm\">\r\n        Docs\r\n      </Link>\r\n    </MoreInfoItem>\r\n  );\r\n}\r\n\r\nfunction appendUrlPath(baseUrl, pathAddition) {\r\n  // \"new URL\" overrides any existing path, so we need to work around it\r\n  const baseUrlPath = new URL(baseUrl).pathname;\r\n  const fullPath = path.join(baseUrlPath, pathAddition);\r\n  return new URL(fullPath, baseUrl).href;\r\n}\r\n\r\nconst graphiqlUrl = appendUrlPath(appUrl, \"/graphql/explore\");\r\n\r\nfunction MoreInfoGraphiQL() {\r\n  return (\r\n    <MoreInfoItem>\r\n      <span>\r\n        Try some queries in the{\" \"}\r\n        <Link target=\"_blank\" href={graphiqlUrl}>\r\n          GraphiQL Explorer\r\n        </Link>\r\n      </span>\r\n    </MoreInfoItem>\r\n  );\r\n}\r\n","export const toggleBoolean = (prev) => !prev;\r\n\r\nconst isValidArrayIndex = (arr, idx) => {\r\n  return !(idx < 0 || idx >= arr.length);\r\n};\r\n\r\nexport function addValueAtIndex(arr, idx, value) {\r\n  if (!isValidArrayIndex(arr, idx) && idx !== arr.length) {\r\n    throw new Error(`Cannot add value. Array index out of bounds.`);\r\n  }\r\n  return [...arr.slice(0, idx), value, ...arr.slice(idx)];\r\n}\r\n\r\nexport function replaceValueAtIndex(arr, idx, newValue) {\r\n  if (!isValidArrayIndex(arr, idx)) {\r\n    throw new Error(`Cannot replace value. Array index out of bounds.`);\r\n  }\r\n  return [...arr.slice(0, idx), newValue, ...arr.slice(idx + 1)];\r\n}\r\n\r\nexport function updateValueAtIndex(arr, idx, updater) {\r\n  if (!isValidArrayIndex(arr, idx)) {\r\n    throw new Error(`Cannot update value. Array index out of bounds.`);\r\n  }\r\n  return [...arr.slice(0, idx), updater(arr[idx]), ...arr.slice(idx + 1)];\r\n}\r\n\r\nexport function removeValueAtIndex(arr, idx) {\r\n  if (!isValidArrayIndex(arr, idx)) {\r\n    throw new Error(`Cannot remove value. Array index out of bounds.`);\r\n  }\r\n  return [...arr.slice(0, idx), ...arr.slice(idx + 1)];\r\n}\r\n\r\nexport const isSameTodo = (todo1, todo2) =>\r\n  String(todo1?._id) === String(todo2?._id);\r\n\r\nexport const getTodoIndex = (todos, todo) => {\r\n  const idx = todos.findIndex((t) => isSameTodo(t, todo));\r\n  return idx >= 0 ? idx : null;\r\n};\r\n","import React from \"react\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport function ErrorAlert({ isOpen, message, onClose = () => {} }) {\r\n  return isOpen ? (\r\n    <Alert onClose={onClose} severity=\"error\">\r\n      {message}\r\n    </Alert>\r\n  ) : null;\r\n}\r\n\r\nexport function useErrorAlert({ error, clearError, hideAfterMs }) {\r\n  const [showErrorAlert, setShowErrorAlert] = React.useState(false);\r\n  const clearErrorAlert = React.useCallback(() => {\r\n    clearError();\r\n    setShowErrorAlert(false);\r\n  }, [clearError]);\r\n\r\n  React.useEffect(() => {\r\n    if (error) {\r\n      setShowErrorAlert(true);\r\n      if (hideAfterMs) {\r\n        const timeout = setTimeout(() => {\r\n          clearErrorAlert();\r\n        }, hideAfterMs);\r\n        return () => {\r\n          clearTimeout(timeout);\r\n        };\r\n      }\r\n    } else {\r\n      setShowErrorAlert(false);\r\n    }\r\n  }, [error, clearErrorAlert, hideAfterMs]);\r\n\r\n  return () => (\r\n    <ErrorAlert\r\n      isOpen={showErrorAlert}\r\n      message={error}\r\n      onClose={() => {\r\n        clearErrorAlert();\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport * as Realm from \"realm-web\";\r\nimport {\r\n  Container,\r\n  TextField,\r\n  Button,\r\n  IconButton,\r\n  Card,\r\n  Typography,\r\n  InputAdornment,\r\n} from \"@material-ui/core\";\r\nimport Visibility from \"@material-ui/icons/Visibility\";\r\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\r\nimport { useRealmApp } from \"./RealmApp\";\r\nimport { MoreInfoTemplateAndDocs } from \"./MoreInfo\";\r\nimport { toggleBoolean } from \"../utils\";\r\nimport { useErrorAlert } from \"../hooks/useErrorAlert\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nexport function WelcomePage() {\r\n  const realmApp = useRealmApp();\r\n  const navigate = useNavigate();\r\n  // Track whether the user is logging in or signing up for a new account\r\n  const [isSignup, setIsSignup] = React.useState(false);\r\n  const toggleIsSignup = () => {\r\n    clearErrors();\r\n    setIsSignup(toggleBoolean);\r\n  };\r\n  // Authentication errors\r\n  const noErrors = {\r\n    email: null,\r\n    password: null,\r\n    other: null,\r\n  };\r\n  const [error, setError] = React.useState(noErrors);\r\n  const clearErrors = () => setError(noErrors);\r\n  const NonAuthErrorAlert = useErrorAlert({\r\n    error: error.other,\r\n    clearError: () => {\r\n      setError((prevError) => ({ ...prevError, other: null }));\r\n    },\r\n  });\r\n  // Manage password visibility\r\n  const [showPassword, setShowPassword] = React.useState(false);\r\n  const toggleShowPassword = () => setShowPassword(toggleBoolean);\r\n\r\n  const onFormSubmit = async ({ email, password }) => {\r\n    clearErrors();\r\n    try {\r\n      if (isSignup) {\r\n        await realmApp.emailPasswordAuth.registerUser(email, password);\r\n        navigate(\"/interests\");\r\n      }\r\n      await realmApp.logIn(Realm.Credentials.emailPassword(email, password));\r\n    } catch (err) {\r\n      handleAuthenticationError(err, setError);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"sm\" className=\"main-container\">\r\n      <Card className=\"auth-card\" variant=\"outlined\">\r\n        <form\r\n          className=\"auth-form\"\r\n          onSubmit={(e) => {\r\n            e.preventDefault();\r\n            const formData = new FormData(e.target);\r\n            const { email, password } = Object.fromEntries(formData.entries());\r\n            onFormSubmit({ email, password });\r\n          }}\r\n        >\r\n          <Typography component=\"h2\" variant=\"h4\" gutterBottom>\r\n            {isSignup ? \"Sign Up\" : \"Log In\"}\r\n          </Typography>\r\n          <NonAuthErrorAlert />\r\n          <TextField\r\n            id=\"input-email\"\r\n            name=\"email\"\r\n            label=\"Email Address\"\r\n            variant=\"outlined\"\r\n            error={Boolean(error.email)}\r\n            helperText={error.email ?? \"\"}\r\n          />\r\n          <TextField\r\n            id=\"input-password\"\r\n            type={showPassword ? \"text\" : \"password\"}\r\n            name=\"password\"\r\n            label=\"Password\"\r\n            variant=\"outlined\"\r\n            error={Boolean(error.password)}\r\n            helperText={error.password ?? \"\"}\r\n            InputProps={{\r\n              endAdornment: (\r\n                <InputAdornment position=\"end\">\r\n                  <IconButton\r\n                    aria-label=\"toggle password visibility\"\r\n                    onClick={toggleShowPassword}\r\n                    onMouseDown={(e) => {\r\n                      e.preventDefault();\r\n                    }}\r\n                  >\r\n                    {showPassword ? <Visibility /> : <VisibilityOff />}\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n            {isSignup ? \"Create Account\" : \"Log In\"}\r\n          </Button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"link-button\"\r\n            onClick={() => toggleIsSignup()}\r\n          >\r\n            {isSignup\r\n              ? \"Already have an account? Log In\"\r\n              : \"Sign up for an account\"}\r\n          </button>\r\n        </form>\r\n      </Card>\r\n      <MoreInfoTemplateAndDocs />\r\n    </Container>\r\n  );\r\n}\r\n\r\nfunction handleAuthenticationError(err, setError) {\r\n  const handleUnknownError = () => {\r\n    setError((prevError) => ({\r\n      ...prevError,\r\n      other: \"Something went wrong. Try again in a little bit.\",\r\n    }));\r\n    console.warn(\r\n      \"Something went wrong with a Realm login or signup request. See the following error for details.\"\r\n    );\r\n    console.error(err);\r\n  };\r\n  if (err instanceof Realm.MongoDBRealmError) {\r\n    const { error, statusCode } = err;\r\n    const errorType = error || statusCode;\r\n    switch (errorType) {\r\n      case \"invalid username\":\r\n        setError((prevError) => ({\r\n          ...prevError,\r\n          email: \"Invalid email address.\",\r\n        }));\r\n        break;\r\n      case \"invalid username/password\":\r\n      case \"invalid password\":\r\n      case 401:\r\n        setError((prevError) => ({\r\n          ...prevError,\r\n          password: \"Incorrect password.\",\r\n        }));\r\n        break;\r\n      case \"name already in use\":\r\n      case 409:\r\n        setError((prevError) => ({\r\n          ...prevError,\r\n          email: \"Email is already registered.\",\r\n        }));\r\n        break;\r\n      case \"password must be between 6 and 128 characters\":\r\n      case 400:\r\n        setError((prevError) => ({\r\n          ...prevError,\r\n          password: \"Password must be between 6 and 128 characters.\",\r\n        }));\r\n        break;\r\n      default:\r\n        handleUnknownError();\r\n        break;\r\n    }\r\n  } else {\r\n    handleUnknownError();\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { useRealmApp } from \"../components/RealmApp\";\r\n\r\n/**\r\n * Returns a MongoDB Collection client object\r\n * @template DocType extends Realm.Services.MongoDB.Document\r\n * @param {Object} config - A description of the collection.\r\n * @param {string} [config.cluster] - The service name of the collection's linked cluster.\r\n * @param {string} config.db - The name of database that contains the collection.\r\n * @param {string} config.collection - The name of the collection.\r\n * @returns {Realm.Services.MongoDB.MongoDBCollection<DocType>} config.collection - The name of the collection.\r\n */\r\nexport function useCollection({ cluster = \"mongodb-atlas\", db, collection }) {\r\n  const realmApp = useRealmApp();\r\n  return React.useMemo(() => {\r\n    const mdb = realmApp.currentUser.mongoClient(cluster);\r\n    return mdb.db(db).collection(collection);\r\n  }, [realmApp.currentUser, cluster, db, collection]);\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  TextField,\r\n  Button,\r\n  IconButton,\r\n  ListItem,\r\n  ListItemSecondaryAction,\r\n  ListItemText,\r\n  withStyles,\r\n} from \"@material-ui/core\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\n\r\nconst ListItemWithTwoSecondaryActions = withStyles({\r\n  secondaryAction: {\r\n    paddingRight: \"120px\",\r\n  },\r\n})(ListItem);\r\n\r\nexport function DraftTodoItem({ todo, todoActions, draftTodoActions }) {\r\n  return (\r\n    <ListItemWithTwoSecondaryActions>\r\n      <ListItemText inset>\r\n        <TextField\r\n          style={{ width: \"100%\" }}\r\n          placeholder=\"What needs doing?\"\r\n          size=\"small\"\r\n          value={todo.summary}\r\n          onChange={(e) => {\r\n            draftTodoActions.setDraftTodoSummary(todo, e.target.value);\r\n          }}\r\n        />\r\n      </ListItemText>\r\n      <ListItemSecondaryAction>\r\n        <Button\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          onClick={async () => {\r\n            await todoActions.saveTodo(todo);\r\n            draftTodoActions.deleteDraftTodo(todo);\r\n          }}\r\n        >\r\n          Save\r\n        </Button>\r\n        <IconButton\r\n          edge=\"end\"\r\n          size=\"small\"\r\n          onClick={() => {\r\n            draftTodoActions.deleteDraftTodo(todo);\r\n          }}\r\n        >\r\n          <ClearIcon />\r\n        </IconButton>\r\n      </ListItemSecondaryAction>\r\n    </ListItemWithTwoSecondaryActions>\r\n  );\r\n}\r\n","import { green, purple, orange, red } from \"@material-ui/core/colors\";\r\n\r\nexport const colors = {\r\n  green: {\r\n    ...green,\r\n    500: \"#09804C\",\r\n    A400: \"#B9EACD\",\r\n  },\r\n  purple: {\r\n    ...purple,\r\n    500: \"#6200EE\",\r\n    A400: \"#9795F9\",\r\n  },\r\n  orange,\r\n  red,\r\n};\r\n","import {\r\n  ThemeProvider as MuiThemeProvider,\r\n  createMuiTheme,\r\n} from \"@material-ui/core\";\r\nimport { colors } from \"../colors\";\r\n\r\nconst themeConfig = {\r\n  palette: {\r\n    primary: colors.purple,\r\n    secondary: colors.purple,\r\n  },\r\n}\r\n\r\nconst theme = createMuiTheme(themeConfig);\r\n\r\nexport function ThemeProvider({ children }) {\r\n  return <MuiThemeProvider theme={theme}>{children}</MuiThemeProvider>;\r\n}\r\n","import * as React from \"react\";\r\nimport { RealmAppProvider, useRealmApp } from \"../../components/RealmApp\";\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { CardActionArea, Container, Grid } from '@material-ui/core';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport IconButton, { IconButtonProps } from '@material-ui/core/IconButton';\r\nimport './AccountPage.css'\r\n\r\nconst bull = (\r\n    <Box\r\n        component=\"span\"\r\n        sx={{ display: 'inline-block', mx: '2px', transform: 'scale(0.8)' }}\r\n    >\r\n    </Box>\r\n);\r\nexport default function AccountPage() {\r\n    const { currentUser } = useRealmApp();\r\n    // alert(typeof currentUser);\r\n    let currentUserJSON=JSON.stringify(currentUser);\r\n    let userdata=JSON.parse(currentUserJSON);\r\n    return (\r\n        <div style={{ padding: 10 }} >\r\n        <Grid container spacing={5}>\r\n        <Grid item xs={6} md={6} lg={6}>\r\n            <Card elevation={3}>\r\n                <CardContent>\r\n                    <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\r\n                        Email\r\n                    </Typography>\r\n                    <Typography variant=\"h5\" component=\"div\">\r\n                    {userdata[\"profile\"].data.email}\r\n                    </Typography>\r\n                    </CardContent>\r\n            </Card>\r\n            </Grid>\r\n            <Grid item xs={6} md={6} lg={6}>\r\n            <Card elevation={1}>\r\n                <CardContent>\r\n                    <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\r\n                        Password\r\n                    </Typography>\r\n                    <Typography variant=\"h5\" component=\"div\">\r\n                         ******\r\n                    </Typography>\r\n                    \r\n                </CardContent>\r\n                <CardActions>\r\n                </CardActions>\r\n            </Card>\r\n            </Grid>\r\n\r\n            <Grid item xs={6} md={6} lg={6}>\r\n            <Card elevation={1}>\r\n                <CardContent>\r\n                    <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\r\n                        Courses\r\n                    </Typography>\r\n                    <Typography variant=\"h5\" component=\"div\">\r\n                        1.2%\r\n                    </Typography>\r\n                    <CardMedia\r\n                        component=\"img\"\r\n                        height=\"150\"\r\n                        image=\"https://www.betterevaluation.org/sites/default/files/styles/feature_image/public/barchart.gif?itok=BiPcDxYw\"\r\n                        alt=\"Progress\"\r\n                    />\r\n                </CardContent>\r\n                <CardActions>\r\n                </CardActions>\r\n            </Card>\r\n            </Grid>\r\n            <Grid item xs={6} md={6} lg={6}>\r\n            <Card elevation={1}>\r\n                <CardContent>\r\n                    <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\r\n                        Badges\r\n                    </Typography>\r\n                    <IconButton aria-label=\"share\">\r\n                            <ShareIcon />\r\n                        </IconButton>\r\n\r\n                    <CardMedia\r\n                        component=\"img\"\r\n                        height=\"100\"\r\n                        image=\"https://static.vecteezy.com/system/resources/previews/002/299/635/non_2x/set-of-company-training-badge-certificates-to-determine-based-on-criteria-illustration-certified-logo-geometric-design-vector.jpg\"\r\n                        alt=\"Badges\"\r\n                    />\r\n                \r\n                </CardContent>\r\n                <CardActions>\r\n                </CardActions>\r\n            </Card>\r\n            </Grid>\r\n            <Grid item xs={6} md={6} lg={6}>\r\n            <Card elevation={3}>\r\n                <CardContent>\r\n                    <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\r\n                        Leaderboard\r\n                    </Typography>\r\n                    <Typography variant=\"h5\" component=\"div\">\r\n                        #5-30000 pts\r\n                    </Typography>\r\n                </CardContent>\r\n                <CardActions>\r\n                </CardActions>\r\n            </Card>\r\n            </Grid>\r\n            \r\n\r\n            <Grid item xs={6} md={6} lg={6}>\r\n            <Card elevation={1}>\r\n                <CardContent>\r\n                    <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\r\n                        Progress\r\n                    </Typography>\r\n                    <Typography variant=\"h5\" component=\"div\">\r\n                        +3 Modules\r\n                    </Typography>\r\n                    <Typography sx={{ mb: 0.5 }} color=\"text.primary\">\r\n                         \r\n                        +5% last 30 days\r\n                    </Typography>\r\n\r\n                \r\n                </CardContent>\r\n                <CardActions>\r\n                </CardActions>\r\n            </Card>\r\n            </Grid>\r\n            </Grid>\r\n            \r\n        \r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport { useWatch } from \"./useWatch\";\r\nimport { useCollection } from \"./useCollection\";\r\nimport { useRealmApp } from \"../components/RealmApp\";\r\nimport { dataSourceName } from \"../realm.json\";\r\nimport { BSON } from \"realm-web\";\r\n\r\n\r\nexport function useCourses() {\r\n    // Set up a list of courses in state\r\n    const realmApp = useRealmApp();\r\n    const [courses, setCourses] = React.useState([]);\r\n    const [loading, setLoading] = React.useState(true);\r\n\r\n    // Get a client object for the todo task collection\r\n    const courseCollection = useCollection({\r\n        cluster: dataSourceName,\r\n        db: \"LearnlyLog\",\r\n        collection: \"Course\",\r\n    });\r\n\r\n    // Fetch all courses on load and whenever our collection changes (e.g. if the current user changes)\r\n    React.useEffect(() => {\r\n        courseCollection.find({}).then((fetchedCourses) => {\r\n            setCourses(fetchedCourses);\r\n            setLoading(false);\r\n        });\r\n    }, [courseCollection]);\r\n\r\n    \r\n    /**\r\n     * Get a course by ID\r\n     * @param {BSON.ObjectId} id THe id of the course you are looking for\r\n     * @returns The course if found, else undefined\r\n     */\r\n    const getCourse = (id) => {\r\n        return courses.find(c => String(c._id) === String(id));\r\n    }\r\n\r\n    return {\r\n        loading,\r\n        courses,\r\n        getCourse\r\n    };\r\n\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { CardActionArea, Container } from '@material-ui/core';\r\nimport { Link } from \"react-router-dom\";\r\nimport IconButton, { IconButtonProps } from '@material-ui/core/IconButton';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport SearchBar from \"material-ui-search-bar\";\r\nimport { useCourses } from \"../../hooks/useCourses\";\r\n\r\n\r\nconst ListOfCourses = props => {\r\n\r\n    return props.courses.map(course => {\r\n        return (\r\n            <Link to={`/course-modules/${course._id}`} className=\"cards\">\r\n\r\n                <Card style={{ height: 250, margin: 5 }} sx={{ maxWidth: 250 }}>\r\n                    <CardActionArea>\r\n                        <CardMedia\r\n                            component=\"img\"\r\n                            height=\"100\"\r\n                            image={course.image}\r\n                            alt=\"image-list\"\r\n                        />\r\n                        <CardContent>\r\n                            <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                                {course.name}\r\n                            </Typography>\r\n                            <Typography color=\"text.secondary\">\r\n                               { course.description }\r\n                            </Typography>\r\n                        </CardContent>\r\n                        <IconButton aria-label=\"add to favorites\">\r\n                            <FavoriteIcon />\r\n                        </IconButton>\r\n                        <IconButton aria-label=\"share\">\r\n                            <ShareIcon />\r\n                        </IconButton>\r\n                    </CardActionArea>\r\n                </Card>\r\n            </Link>\r\n        )\r\n    }\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default function AllCourses() {\r\n\r\n    const { courses, loading } = useCourses();\r\n    const [filteredCourses, setCourses] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setCourses(courses);\r\n    }, [courses])\r\n\r\n    const doSomethingWith = (query) => {\r\n        if (query.length) {\r\n            let searchStr = query.toLowerCase().trim();\r\n            let filtered = courses.filter(c => c.name.toLowerCase().includes(searchStr));\r\n            setCourses(filtered);\r\n        } else {\r\n            setCourses(courses);\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n        <Container className=\"main-container\">\r\n            <div>\r\n                <h1>All Courses</h1>\r\n                <SearchBar\r\n                    onChange={(newValue) => doSomethingWith(newValue)}\r\n                    onCancelSearch={() => setCourses(courses)}\r\n                />\r\n            </div>\r\n            <div>\r\n                <ListOfCourses courses={filteredCourses} />\r\n            </div>\r\n        </Container>\r\n    );\r\n}","import React, { useState, useEffect } from \"react\"\r\nimport socketIOClient from \"socket.io-client\";\r\nimport { useRealmApp } from \"../../components/RealmApp\";\r\nimport { Chip } from \"@material-ui/core\";\r\nimport \"./Chat.css\";\r\n\r\nlet socket = null;\r\n\r\nexport default function ChatPage() {\r\n    const { currentUser } = useRealmApp();\r\n    const [messages, setMessages] = useState([]);\r\n    const [msgInput, setMsgInput] = useState(\"\");\r\n    // const [socket, setSocket] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (socket == null) {\r\n            socket = socketIOClient(window.location.origin, { transports: ['websocket']});\r\n        } \r\n        socket.emit(\"join chat\", currentUser);\r\n        socket.on(\"chat message\", (data) => {\r\n            let temp = messages;\r\n            temp.push(data)\r\n            setMessages([...temp]);\r\n            const el = document.getElementById('chat-feed');\r\n            el.scrollTop = el.scrollHeight;\r\n        });\r\n        return () => {\r\n            socket.emit(\"leave chat\", currentUser);\r\n            socket.off(\"chat message\");\r\n        }\r\n\r\n    }, []);\r\n\r\n    const sendMessage = (event) => {\r\n        event.preventDefault();\r\n        if (msgInput) {\r\n            socket.emit(\"chat message\", {\r\n                content: msgInput,\r\n                user: currentUser\r\n            });\r\n            setMsgInput(\"\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"messages\" id=\"chat-feed\">\r\n                {\r\n                    messages.map(msg => {\r\n                        if (msg.user.id == currentUser.id) {\r\n                            return (\r\n                                <div className=\"chat-message message-right\">\r\n                                    <Chip className=\"chat-chip\" color=\"primary\" label={ msg.content }/><br/>\r\n                                    <small>{ new Date(msg.time).toLocaleTimeString() }</small>\r\n                                </div>\r\n                            );\r\n                        } else if (msg.user.id == null && msg.user.name == \"SERVER\") {\r\n                           return (\r\n                                <div className=\"chat-message\" style={{textAlign: \"center\"}}>\r\n                                    { msg.content }\r\n                                </div>\r\n                           ); \r\n                        } else {\r\n                            return (\r\n                                <div className=\"chat-message\">\r\n                                    <small>{ msg.user.name.split('@')[0] }</small><br/>\r\n                                    <Chip color=\"secondary\" label={ msg.content }></Chip><br/>\r\n                                    <small>{ new Date(msg.time).toLocaleTimeString() }</small>\r\n                                </div>\r\n                            );\r\n                        }  \r\n                    })\r\n                }\r\n            </div>\r\n            <form className=\"chat-form\" action=\"\" onSubmit={sendMessage}>\r\n                <input className=\"chat-input\" autocomplete=\"off\" placeholder=\"Type to chat with others...\" value={msgInput} onChange={e => setMsgInput(e.target.value)}/><button>Send</button>\r\n            </form>\r\n        </div>\r\n        \r\n        \r\n    );\r\n}","import React from \"react\";\r\nimport { useWatch } from \"./useWatch\";\r\nimport { useCollection } from \"./useCollection\";\r\nimport { useRealmApp } from \"../components/RealmApp\";\r\nimport { dataSourceName } from \"../realm.json\";\r\nimport { BSON } from \"realm-web\";\r\n\r\n\r\nexport function useModules() {\r\n    // Set up a list of modules in state\r\n    const realmApp = useRealmApp();\r\n    const [modules, setModules] = React.useState([]);\r\n    const [loading, setLoading] = React.useState(true);\r\n\r\n    // Get a client object for the todo task collection\r\n    const moduleCollection = useCollection({\r\n        cluster: dataSourceName,\r\n        db: \"LearnlyLog\",\r\n        collection: \"Module\",\r\n    });\r\n\r\n    // Fetch all modules on load and whenever our collection changes (e.g. if the current user changes)\r\n    React.useEffect(() => {\r\n        moduleCollection.find({}).then((fetchedModules) => {\r\n            setModules(fetchedModules);\r\n            setLoading(false);\r\n        });\r\n    }, [moduleCollection]);\r\n\r\n    /**\r\n     * Return a module by id\r\n     * @param {BSON.ObjectId | string} id The object id of the module \r\n     * @returns A Module if found, else undefined\r\n     */\r\n    const getModule = (id) => {\r\n        return modules.find(m => String(m._id) === String(id));\r\n    }\r\n\r\n    return {\r\n        loading,\r\n        modules,\r\n        getModule\r\n    };\r\n\r\n}","import React from \"react\";\r\nimport { useWatch } from \"./useWatch\";\r\nimport * as Realm from \"realm-web\";\r\nimport { useCollection } from \"./useCollection\";\r\nimport { useRealmApp } from \"../components/RealmApp\";\r\nimport { dataSourceName } from \"../realm.json\";\r\n\r\n\r\nexport function useCourseEnrollment() {\r\n    // Set up a list of courses in state\r\n    const realmApp = useRealmApp();\r\n    const [enrollments, setCourseEnrollment] = React.useState([]);\r\n    const [loading, setLoading] = React.useState(true);\r\n\r\n    // Get a client object for the todo task collection\r\n    const enrollmentCollection = useCollection({\r\n        cluster: dataSourceName,\r\n        db: \"LearnlyLog\",\r\n        collection: \"CourseEnrollment\",\r\n    });\r\n\r\n    // Fetch all courses on load and whenever our collection changes (e.g. if the current user changes)\r\n    React.useEffect(() => {\r\n        enrollmentCollection.find({}).then((fetchedCourseEnrollment) => {\r\n            setCourseEnrollment(fetchedCourseEnrollment);\r\n            setLoading(false);\r\n        });\r\n    }, [enrollmentCollection]);\r\n\r\n    const isEnrolled = (id) => {\r\n        return enrollments.findIndex(e => String(e.courseId) === String(id) && e._partition == realmApp.currentUser.id) >= 0;\r\n    }\r\n\r\n    /**\r\n     * Get the current user's enrolled courses\r\n     * @returns a list of CourseEnrollments for the current user\r\n     */\r\n    const getUserEnrollments = () => {\r\n        return enrollments.filter(e => e._partition === realmApp.currentUser.id);\r\n    }\r\n\r\n    const dropCourse = async (id) => {\r\n        await enrollmentCollection.deleteOne({ _partition: realmApp.currentUser.id, courseId: id });\r\n    }\r\n\r\n    const enrollCourse = async (id) => {\r\n        try {\r\n            await enrollmentCollection.insertOne({\r\n                _id: new Realm.BSON.ObjectID(),\r\n                _partition: realmApp.currentUser.id,\r\n                courseId: id,\r\n                startDate: new Date()\r\n            });\r\n          } catch (err) {\r\n            // already enrolled if dup\r\n            console.error(err);\r\n          }\r\n    }\r\n\r\n\r\n    return {\r\n        loading,\r\n        enrollments,\r\n        dropCourse,\r\n        enrollCourse,\r\n        isEnrolled,\r\n        getUserEnrollments\r\n    };\r\n\r\n}","import React from \"react\";\r\nimport * as Realm from \"realm-web\";\r\nimport { useCollection } from \"./useCollection\";\r\nimport { useRealmApp } from \"../components/RealmApp\";\r\nimport { dataSourceName } from \"../realm.json\";\r\n\r\n\r\nexport function useUserModules() {\r\n    // Set up a list of userModules in state\r\n    const realmApp = useRealmApp();\r\n    const [userModules, setUserModules] = React.useState([]);\r\n    const [loading, setLoading] = React.useState(true);\r\n\r\n    // Get a client object for the todo task collection\r\n    const userModuleCollection = useCollection({\r\n        cluster: dataSourceName,\r\n        db: \"LearnlyLog\",\r\n        collection: \"UserModules\",\r\n    });\r\n\r\n    // Fetch all userModules on load and whenever our collection changes (e.g. if the current user changes)\r\n    React.useEffect(() => {\r\n        userModuleCollection.find({}).then((fetchedUserModules) => {\r\n            setUserModules(fetchedUserModules);\r\n            setLoading(false);\r\n        });\r\n    }, [userModuleCollection]);\r\n\r\n    const getAttempt = (moduleId) => {\r\n        return userModules.find(a => a._partition === realmApp.currentUser.id && String(a.moduleId) === String(moduleId));\r\n    }\r\n\r\n    /**\r\n     * Get all module completion attempts for the currently signed in user\r\n     * @returns A list of UserModules\r\n     */\r\n    const getUserAttempts = () => {\r\n        return userModules.filter(m => m._partition === realmApp.currentUser.id);\r\n    }\r\n\r\n    const makeAttempt = async (attempt) => {\r\n        let previous = await userModuleCollection.findOne(\r\n            {\r\n                _partition: realmApp.currentUser.id,\r\n                moduleId: attempt.moduleId\r\n            });\r\n        if (previous && attempt.score >= previous.bestScore) {\r\n            return userModuleCollection.updateOne({\r\n                    _partition: realmApp.currentUser.id,\r\n                    moduleId: attempt.moduleId\r\n                },\r\n                {\r\n                    bestScore: attempt.score,\r\n                    lastAttempt: new Date(),\r\n                    _partition: realmApp.currentUser.id,\r\n                    moduleId: attempt.moduleId\r\n                }\r\n            )\r\n        } else {\r\n            return userModuleCollection.insertOne({\r\n                _id: new Realm.BSON.ObjectID(),\r\n                _partition: realmApp.currentUser.id,\r\n                moduleId: attempt.moduleId,\r\n                bestScore: Math.round(attempt.score),\r\n                lastAttempt: new Date()\r\n            });\r\n        }\r\n    }\r\n\r\n    return {\r\n        loading,\r\n        userModules,\r\n        makeAttempt,\r\n        getUserAttempts,\r\n        getAttempt\r\n    };\r\n\r\n}","import React, { useState, useEffect } from \"react\"\r\nimport { useCourses } from \"../../hooks/useCourses\";\r\nimport { useModules } from \"../../hooks/useModules\";\r\nimport { Card, Grid, Typography, Container, CardMedia, CardContent, Button, CardActions, CardHeader, Avatar, CircularProgress } from \"@material-ui/core\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./CourseModulesPage.css\";\r\nimport { useCourseEnrollment } from \"../../hooks/useCourseEnrollment\";\r\nimport { useUserModules } from \"../../hooks/useUserModules\";\r\nimport { red, purple, green, yellow, grey } from '@material-ui/core/colors';\r\n\r\n\r\nconst getAvatarColor = (score) => {\r\n    if (!score) {\r\n        return purple[200];\r\n    } else if (score <= 50) {\r\n        return red[200];\r\n    } else if (score <= 75) {\r\n        return yellow[200];\r\n    } else {\r\n        return green[200];\r\n    }\r\n}\r\n\r\nconst ModuleCard = (props) => {\r\n    return (\r\n        <Card sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\r\n            <CardHeader\r\n                avatar={\r\n                    <Avatar style={{ backgroundColor: getAvatarColor(props.attempt?.bestScore) }} aria-label=\"attempt\">\r\n                        <Typography variant=\"caption\" display=\"block\" style={{ color: grey[900] }}>{props.attempt ? `${props.attempt.bestScore}%` : \"N/A\"}</Typography>\r\n                    </Avatar>\r\n                }\r\n                title={props.module.name}\r\n                subheader={props.attempt ? `Last: ${props.attempt.lastAttempt.toLocaleDateString()} ${props.attempt.lastAttempt.toLocaleTimeString()}` : \"Incomplete\"}\r\n            />\r\n            <CardMedia\r\n                component=\"img\"\r\n                height=\"200\"\r\n                image={`https://source.unsplash.com/random/?${props.course?.name},${props.module.name}`}\r\n                alt=\"random\"\r\n            />\r\n            <CardContent sx={{ flexGrow: 1 }}>\r\n                <Typography noWrap>\r\n                    {props.module.description}\r\n                </Typography>\r\n            </CardContent>\r\n            <CardActions>\r\n                <Link to={`/module/${props.module._id}`}>\r\n                    <Button size=\"small\" variant=\"contained\" color=\"primary\">View</Button>\r\n                </Link>\r\n                <Link to={`/module-quiz/${props.module._id}`}>\r\n                    <Button size=\"small\" variant=\"contained\" color=\"primary\">{props.attempt ? \"Retake\" : \"Take\"} Quiz</Button>\r\n                </Link>\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default function CourseModulesPage() {\r\n\r\n    const { modulesLoading, modules, loading } = useModules();\r\n    const { isEnrolled, enrollCourse, dropCourse } = useCourseEnrollment();\r\n    const { userModules, getAttempt } = useUserModules();\r\n    const { courses } = useCourses();\r\n    const [course, setCourse] = useState(null);\r\n    const { id } = useParams();\r\n\r\n    const userEnrolled = () => course ? isEnrolled(course._id) : false;\r\n    const buttonText = () => userEnrolled() ? \"Drop\" : \"Enroll\";\r\n    const courseModules = () => modules.filter(m => String(m.courseId) === String(course?._id));\r\n    const completeModules = () => courseModules().filter(m => {\r\n        let attempt = getAttempt(m._id);\r\n        return attempt && attempt.bestScore >= 75;\r\n    });\r\n\r\n    useEffect(() => {\r\n        let thisCourse = courses.find(c => String(c._id) == id);\r\n        setCourse(thisCourse);\r\n    }, [courses, modules, userModules]);\r\n\r\n    const enrollAction = async () => {\r\n        if (userEnrolled()) {\r\n            let confirmed = window.confirm(\"Are you sure? You will lose all progress in this course including quiz scores, completion, and badges.\");\r\n            if (confirmed)\r\n                await dropCourse(course?._id);\r\n        } else {\r\n            await enrollCourse(course?._id);\r\n        }\r\n        window.location.reload();   // too lazy to update the ui\r\n    }\r\n\r\n    return loading ?\r\n        <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n            <CircularProgress style={{ marginTop: \"10%\" }} />\r\n        </div>\r\n        : (\r\n            <Container className=\"main-container\" maxWidth=\"md\">\r\n\r\n                <Typography variant=\"h2\" component=\"div\">\r\n                    {course?.name}\r\n                    <Button onClick={enrollAction} className=\"enrollment-btn\" variant=\"outlined\" color={userEnrolled() ? \"secondary\" : \"primary\"}>\r\n                        {`${buttonText()} Course`}\r\n                    </Button>\r\n                </Typography>\r\n                <p>Objective: {course?.description}</p>\r\n                <hr />\r\n                {/* End hero unit */}\r\n                <Grid container spacing={3}>\r\n                    {courseModules().map((module, i) => {\r\n                        let attempt = getAttempt(module._id);\r\n                        if (!attempt || attempt.bestScore < 75) {\r\n                            return (\r\n                                <Grid item key={i} xs={12} sm={6} md={4}>\r\n                                    <ModuleCard course={course} module={module} attempt={attempt} />\r\n                                </Grid>\r\n                            )\r\n                        }\r\n                    })}\r\n                </Grid>\r\n\r\n                <div>\r\n                    {\r\n                        completeModules().length > 0 ?\r\n                            <div>\r\n                                <hr />\r\n                                <Typography variant=\"h5\" component=\"div\">\r\n                                    Completed\r\n                                </Typography>\r\n                                <Grid container spacing={3}>\r\n                                    {completeModules().map((module, i) =>\r\n\r\n\r\n                                        <Grid item key={i} xs={12} sm={6} md={4}>\r\n                                            <ModuleCard course={course} module={module} attempt={getAttempt(module._id)} />\r\n                                        </Grid>\r\n\r\n\r\n                                    )}\r\n                                </Grid>\r\n                            </div>\r\n                            : null\r\n                    }\r\n                </div>\r\n\r\n\r\n            </Container>\r\n\r\n        );\r\n\r\n}","import * as React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { CardActionArea, Container, CircularProgress, Chip } from '@material-ui/core';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Box from '@material-ui/core/Box';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport { Link } from \"react-router-dom\";\r\nimport { useCourses } from \"../../hooks/useCourses\";\r\nimport './HomePage.css';\r\nimport { useCourseEnrollment } from '../../hooks/useCourseEnrollment';\r\nimport { useModules } from '../../hooks/useModules';\r\nimport { useUserModules } from '../../hooks/useUserModules';\r\nimport { useRealmApp } from \"../../components/RealmApp\";\r\n\r\n\r\nconst DisplayCourses = props => {\r\n\r\n    const { modules } = useModules();\r\n    const { getAttempt } = useUserModules();\r\n\r\n    return props.courses.map(course => {\r\n\r\n        let progress = 0;  // %\r\n        if (props.isEnrolled) {\r\n            let cModules = modules.filter(m => String(m.courseId) === String(course._id));\r\n            let attempts = cModules.map(m => getAttempt(m._id));    // get attempts for each module, if any\r\n            progress = Math.round((attempts.filter(a => a && a.bestScore >= 75).length / cModules.length) * 100);\r\n        }\r\n\r\n        if (isNaN(progress)) progress = 0;  // something wack here\r\n\r\n        return (\r\n            <Link to={`course-modules/${course._id}`} className=\"course-card\" style={{ textDecoration: \"none\" }}>\r\n                <Card style={{ height: 250, margin: 5 }} sx={{ maxWidth: 250 }}>\r\n                    <CardActionArea>\r\n                        <CardMedia\r\n                            component=\"img\"\r\n                            height=\"140\"\r\n                            image={course.image}\r\n                            alt=\"course image\"\r\n                        />\r\n                        <CardContent>\r\n                            <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                                {course.name}\r\n                            </Typography>\r\n                            {props.isEnrolled ? null :\r\n                                <Typography noWrap variant=\"body2\" color=\"text.secondary\">\r\n                                    {course.description}\r\n                                </Typography>}\r\n                        </CardContent>\r\n                    </CardActionArea>\r\n                </Card>\r\n                {props.isEnrolled ? <Box sx={{ display: 'flex' }} style={{ padding: 5 }}>\r\n                    <Box sx={{ width: '95%', mr: 1 }}>\r\n                        <LinearProgress borderRadius=\"5\" variant=\"determinate\" value={progress} />\r\n                    </Box>\r\n                    <Box sx={{ minWidth: 35, maxWidth: 250 }}>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">{`${Math.round(progress)}%`}</Typography>\r\n                    </Box>\r\n                </Box> : null}\r\n            </Link>\r\n        )\r\n    })\r\n}\r\n\r\nexport default function HomePage() {\r\n\r\n    const realmApp = useRealmApp();\r\n\r\n    const { courses, loading } = useCourses();\r\n    const { isEnrolled } = useCourseEnrollment();\r\n\r\n    const myCourses = () => courses.filter(c => isEnrolled(c._id));\r\n\r\n    return loading ?\r\n        <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n            <CircularProgress style={{ marginTop: \"10%\" }} />\r\n        </div>\r\n        : (\r\n            <div className=\"page-content\">\r\n                <h2>My Courses</h2>\r\n                <div className='my-courses-content'>\r\n                    {\r\n                        !myCourses().length ?\r\n                            <div style={{ textAlign: \"center\", width: \"100%\" }}>\r\n                                <Chip variant=\"outlined\" color=\"primary\" label={\r\n                                        <Typography variant=\"h5\" component=\"div\">\r\n                                            {`Welcome, ${realmApp.currentUser.profile.email.split('@')[0]}!`}\r\n                                        </Typography>\r\n                                    }>\r\n                                </Chip>\r\n                                <Typography variant=\"subtitle1\" gutterBottom component=\"div\">\r\n                                    {`We've listed some courses below that we think you might enjoy and take something meaningful from. Click one to view its required modules and enroll when you're ready!`}\r\n                                </Typography>\r\n                            </div>\r\n                            :\r\n                            <DisplayCourses courses={myCourses()} isEnrolled={true} />\r\n                    }\r\n                </div>\r\n                <div id='all-courses-heading-content'>\r\n                    <h2>All Courses</h2>\r\n                    <Link to=\"/all-courses\">\r\n                        <p style={{ marginRight: 20, cursor: 'pointer' }}><b>MORE COURSES &gt;</b></p>\r\n                    </Link>\r\n                </div>\r\n                <div className='all-courses-content'>\r\n                    <DisplayCourses courses={courses.filter(c => !isEnrolled(c._id)).slice(0, 7)} isEnrolled={false} />\r\n                </div>\r\n                <Link to=\"/chat\">\r\n                    <Fab color='primary' className='chat-button' variant=\"extended\">\r\n                        <b>+ JOIN CHAT</b>\r\n                    </Fab>\r\n                </Link>\r\n            </div>\r\n        );\r\n}","import * as React from \"react\";\r\nimport \"./InterestsPageStyle.css\";\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport { Fab } from \"@material-ui/core\";\r\nimport { Routes, Route, Link, useNavigate } from \"react-router-dom\";\r\nimport { CardActionArea, Container, Grid, Typography } from '@material-ui/core';\r\nimport { purple } from '@material-ui/core/colors';\r\n\r\n\r\n\r\n\r\nlet interests = [\r\n    {\r\n        InterestName: \"Technology\",\r\n        InterestImage: \"https://cdn-icons-png.flaticon.com/512/490/490498.png\"\r\n    },\r\n    {\r\n        InterestName: \"UX/UI\",\r\n        InterestImage: \"https://cdn-icons-png.flaticon.com/512/1055/1055666.png\"\r\n    },\r\n    {\r\n        InterestName: \"Game Design\",\r\n        InterestImage: \"https://cdn-icons-png.flaticon.com/512/141/141073.png\"\r\n    },\r\n    {\r\n        InterestName: \"Music\",\r\n        InterestImage: \"https://cdn-icons-png.flaticon.com/512/4472/4472592.png\"\r\n    },\r\n    {\r\n        InterestName: \"Cooking\",\r\n        InterestImage: \"https://cdn-icons-png.flaticon.com/512/1689/1689198.png\"\r\n    },\r\n    {\r\n        InterestName: \"Web Development\",\r\n        InterestImage: \"https://cdn-icons-png.flaticon.com/512/977/977597.png\"\r\n    },\r\n    {\r\n        InterestName: \"Theatre\",\r\n        InterestImage: \"https://cdn-icons-png.flaticon.com/512/1778/1778557.png\"\r\n    }\r\n    ,\r\n    {\r\n        InterestName: \"Fitness\",\r\n        InterestImage: \"https://cdn-icons-png.flaticon.com/512/1719/1719714.png\"\r\n    }\r\n]\r\n\r\nfunction InterestCard(props) {\r\n    const { name, image, add, remove } = props\r\n\r\n    const [isSelected, setIsSelected] = React.useState(false)\r\n\r\n    function test() {\r\n\r\n        if (isSelected) {\r\n            setIsSelected(false)\r\n            remove(name)\r\n        }\r\n        else {\r\n            setIsSelected(true)\r\n            add(name)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Grid item key={props.name} xs={12} sm={4} md={3}>                          \r\n            <Card onClick={test} style={{ backgroundColor: isSelected ? purple[200] : '#F1F3F4' }} variant=\"outlined\">\r\n                <CardActionArea>\r\n                    <CardMedia\r\n                        component=\"img\"\r\n                        height=\"180\"\r\n                        image={image}\r\n                    />\r\n                    <CardContent\r\n                        height=\"50\"\r\n                    >\r\n                        <p style={{ textAlign: 'center' }}>{name}</p>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n            </Card>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nfunction DisplayAllCards() {\r\n    let userInterests = []\r\n\r\n    function addInterest(name) {\r\n        userInterests.push(name)\r\n        console.log(userInterests);\r\n\r\n    }\r\n\r\n    function removeInterest(name) {\r\n        userInterests = userInterests.filter(e => e !== name);\r\n        console.log(userInterests);\r\n    }\r\n\r\n\r\n    return (\r\n        interests.map(element => {\r\n            return (\r\n                <InterestCard name={element.InterestName} image={element.InterestImage} add={addInterest} remove={removeInterest} />\r\n            )\r\n        }\r\n\r\n        )\r\n    );\r\n}\r\n\r\nconst nextButtonStyle = {\r\n    borderRadius: 50,\r\n    padding: 25,\r\n    margin: 30,\r\n    top: 'auto',\r\n    right: 20,\r\n    bottom: 20,\r\n    left: 'auto',\r\n    position: 'fixed',\r\n};\r\n\r\n\r\nfunction NextButton() {\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const redirect = () => {\r\n        navigate(\"/\")\r\n    }\r\n\r\n    return (\r\n        <Fab className=\"nextButton\"\r\n            size=\"large\"\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            style={nextButtonStyle}\r\n            onClick={redirect}\r\n        >\r\n            Next\r\n        </Fab>\r\n    );\r\n};\r\n\r\nexport default function InterestsPage() {\r\n    return (\r\n        <Container className=\"main-container\" maxWidth=\"md\">\r\n            <div style={{ textAlign: \"center\"}}>\r\n                <Typography variant=\"h3\" gutterBottom component=\"div\">\r\n                    Choose your interests\r\n                </Typography>\r\n            </div>\r\n            <Grid container spacing={3}>\r\n                <DisplayAllCards />\r\n            </Grid>\r\n            <NextButton />\r\n        </Container>\r\n\r\n    );\r\n}","import * as React from \"react\";\r\nimport BigCalendar from 'react-big-calendar-like-google';\r\nimport \"react-big-calendar-like-google/lib/css/react-big-calendar.css\";\r\nimport moment from 'moment';\r\nimport { useCourseEnrollment } from \"../../hooks/useCourseEnrollment\";\r\nimport { useUserModules } from \"../../hooks/useUserModules\";\r\nimport { useCourses } from \"../../hooks/useCourses\";\r\nimport { useModules } from \"../../hooks/useModules\";\r\n\r\nBigCalendar.momentLocalizer(moment);\r\n\r\nexport default function LearningLogPage() {\r\n\r\n    const { getUserEnrollments } = useCourseEnrollment();\r\n    const { getUserAttempts } = useUserModules();\r\n    const { getCourse } = useCourses();\r\n    const { getModule } = useModules();\r\n\r\n    const events = getUserEnrollments().map(e => {\r\n        if (e.completionDate) {\r\n            let course = getCourse(e.courseId);\r\n            return {\r\n                title: `${course?.name} Course Completed`,\r\n                start: e.completionDate,\r\n                end: e.completionDate || new Date(),\r\n                allDay: false,\r\n                bgColor:  '#ff7f50',\r\n            }\r\n        }\r\n    }).concat(\r\n        getUserAttempts().map(a => {\r\n            if (a.bestScore && a.bestScore >= 75) {\r\n                let module = getModule(a.moduleId);\r\n                return {\r\n                    title: `${module?.name} Module Completed`,\r\n                    start: a.lastAttempt,\r\n                    end: a.lastAttempt,\r\n                    allDay: false,\r\n                    bgColor:  '#dc143c'\r\n                }\r\n            }\r\n        })\r\n    );\r\n    console.log(events);\r\n\r\n    return (\r\n        <BigCalendar events={events} />\r\n    );\r\n}","import * as React from \"react\";\r\nimport { Fab, Container } from \"@material-ui/core\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport \"./ModulePage.css\";\r\nimport { useModules } from \"../../hooks/useModules\";\r\n\r\n\r\n\r\nconst takeQuizButtonStyle = {\r\n    borderRadius: 50,\r\n    padding: 25,\r\n    margin: 30,\r\n    top: 'auto',\r\n    right: 20,\r\n    bottom: 20,\r\n    left: 'auto',\r\n    position: 'fixed',\r\n};\r\n\r\n\r\nfunction TakeQuizButton(props) {\r\n\r\n    return (\r\n        <Link to={`/module-quiz/${props.mId}`}>\r\n            <Fab className=\"takeQuizButton\"\r\n                size=\"large\"\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                style={takeQuizButtonStyle}\r\n            >\r\n                Take Quiz\r\n            </Fab>\r\n        </Link>\r\n    );\r\n};\r\n\r\n\r\nexport default function ModulePage() {\r\n    const { id } = useParams();\r\n    const { modules } = useModules();\r\n    const [module, setModule] = React.useState();\r\n\r\n    React.useEffect(() => {\r\n        let thisModule = modules.find(m => String(m._id) === id);\r\n        setModule(thisModule);\r\n    }, [modules]);\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"modulePageHeadStyle\">\r\n                <h1>{module?.name}</h1>\r\n            </div>\r\n            <h3>{module?.description}</h3>\r\n            <p>{module?.content}</p>\r\n            <TakeQuizButton mId={module?._id} />\r\n        </Container>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport './QuestionCard.css';\r\n\r\nconst QuestionCard = props => {\r\n    const BlueRadio = withStyles({\r\n        root: {\r\n            color: '#default',\r\n            '&$checked': {\r\n                color: '#3f51b5',\r\n            },\r\n        },\r\n        checked: {},\r\n    })((props) => <Radio color=\"default\" {...props} />);\r\n\r\n    return (\r\n        <Card className='question-card'>\r\n            <CardContent>\r\n                <Typography>\r\n                    {props.cardQuestion.prompt}\r\n                </Typography>\r\n                {props.cardQuestion.type == 'mc' ? <RadioGroup onChange={props.radioChangeHandler}>\r\n                    {props.cardQuestion.options.map((answer, i) => {\r\n                        return (\r\n                            <FormControlLabel\r\n                                key={i}\r\n                                value={answer}\r\n                                control={<BlueRadio />}\r\n                                label={answer.replace('*', '')}\r\n                            />\r\n                        );\r\n                    })}\r\n                </RadioGroup> :\r\n                    <TextField id=\"standard-basic\" label=\"Answer...\" variant=\"standard\" onChange={props.radioChangeHandler} />\r\n                }\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default QuestionCard;","import React, { useState, useEffect } from \"react\";\r\nimport { useRealmApp } from \"../../components/RealmApp\";\r\nimport { Button, Container, CircularProgress } from '@material-ui/core';\r\nimport './ModuleQuizPage.css';\r\nimport QuestionCard from './QuestionCard';\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { useModules } from \"../../hooks/useModules\";\r\nimport { useQuizQuestions } from \"../../hooks/useQuizQuestion\";\r\nimport { useUserModules } from \"../../hooks/useUserModules\";\r\n\r\n\r\nlet userAnswersArray = [];\r\n\r\nconst radioChangeHandler = (index, event) => {\r\n    userAnswersArray[index] = event.target.value;\r\n}\r\n\r\n\r\nconst DisplayQuizQuestions = props => {\r\n    return (\r\n        <div className='card-list'>\r\n            {props.questions.map((question, i) => {\r\n                return (\r\n                    <QuestionCard key={i} cardNumber={i} cardQuestion={question} radioChangeHandler={(e) => radioChangeHandler(i, e)} />\r\n                );\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default function ModuleQuizPage() {\r\n    const { modules } = useModules();\r\n    const { id } = useParams();\r\n    const navigate = useNavigate();\r\n\r\n    const { makeAttempt } = useUserModules();\r\n    const { quizQuestions, loading } = useQuizQuestions();\r\n\r\n    const [module, setModule] = useState();\r\n\r\n    const moduleQuestions = () => quizQuestions.filter(q => String(q.moduleId) === String(module?._id));\r\n\r\n    useEffect(() => {\r\n        let thisModule = modules.find(m => String(m._id) === id);\r\n        setModule(thisModule);\r\n    }, [modules, quizQuestions]);\r\n\r\n    const onSubmitQuiz = async () => {\r\n        let numRight = moduleQuestions().reduce((acc, q, i) => q.answer.toLowerCase() == (userAnswersArray[i] || \"\").toLowerCase() ? ++acc : acc, 0);\r\n        let score = (numRight / moduleQuestions().length) * 100;\r\n        alert(`You scored ${Math.round(score)}%`);\r\n        const attempt = {\r\n            moduleId: module._id,\r\n            score: score\r\n        }\r\n        try {\r\n            await makeAttempt(attempt);\r\n            navigate(`/course-modules/${module.courseId}`);\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n    return loading ?\r\n        <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n            <CircularProgress style={{ marginTop: \"10%\" }} />\r\n        </div>\r\n        : (\r\n            <Container className='quiz-container'>\r\n                <h1>{module?.name} Quiz</h1>\r\n                <p>You must score 75% or higher to pass.</p>\r\n                <DisplayQuizQuestions questions={moduleQuestions()} />\r\n                <Button onClick={onSubmitQuiz} className='submit-button' variant='contained' size='large' color='primary'>SUBMIT</Button>\r\n            </Container>\r\n        );\r\n}","import React from \"react\";\r\nimport { useWatch } from \"./useWatch\";\r\nimport { useCollection } from \"./useCollection\";\r\nimport { useRealmApp } from \"../components/RealmApp\";\r\nimport { dataSourceName } from \"../realm.json\";\r\n\r\n\r\nexport function useQuizQuestions() {\r\n    // Set up a list of quizQuestions in state\r\n    const realmApp = useRealmApp();\r\n    const [quizQuestions, setQuizQuestions] = React.useState([]);\r\n    const [loading, setLoading] = React.useState(true);\r\n\r\n    // Get a client object for the todo task collection\r\n    const quizQuestionCollection = useCollection({\r\n        cluster: dataSourceName,\r\n        db: \"LearnlyLog\",\r\n        collection: \"QuizQuestion\",\r\n    });\r\n\r\n    // Fetch all quizQuestions on load and whenever our collection changes (e.g. if the current user changes)\r\n    React.useEffect(() => {\r\n        quizQuestionCollection.find({}).then((fetchedQuizQuestions) => {\r\n            setQuizQuestions(fetchedQuizQuestions);\r\n            setLoading(false);\r\n        });\r\n    }, [quizQuestionCollection]);\r\n\r\n    return {\r\n        loading,\r\n        quizQuestions\r\n    };\r\n\r\n}","import * as React from \"react\";\r\nimport { AppBar, Toolbar, Button, Typography, IconButton } from \"@material-ui/core\";\r\nimport { AccountCircle, CalendarToday, ExitToApp, Chat } from '@material-ui/icons';\r\nimport { WelcomePage } from \"./WelcomePage\";\r\nimport { TodoItemsPage } from \"./TodoItemsPage\";\r\nimport { RealmAppProvider, useRealmApp } from \"./RealmApp\";\r\nimport { ThemeProvider } from \"./Theme\";\r\nimport { AppName } from \"./AppName\";\r\nimport { appId } from \"../realm.json\";\r\nimport { Routes, Route, Link } from \"react-router-dom\";\r\nimport AccountPage from '../pages/Account/AccountPage';\r\nimport AllCoursesPage from '../pages/AllCourses/AllCoursesPage';\r\nimport ChatPage from '../pages/Chat/ChatPage';\r\nimport CourseModulesPage from '../pages/CourseModules/CourseModulesPage';\r\nimport HomePage from '../pages/Home/HomePage';\r\nimport InterestsPage from '../pages/Interests/InterestsPage';\r\nimport LearningLogPage from '../pages/LearningLog/LearningLogPage';\r\nimport ModulePage from '../pages/Module/ModulePage';\r\nimport ModuleQuizPage from '../pages/ModuleQuiz/ModuleQuizPage';\r\nimport \"./App.css\";\r\n\r\nexport default function AppWithRealm() {\r\n  return (\r\n    <ThemeProvider>\r\n      <RealmAppProvider appId={appId}>\r\n        <App />\r\n      </RealmAppProvider>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  const { currentUser, logOut } = useRealmApp();\r\n  return (\r\n    <div className=\"App\">\r\n      <AppBar position=\"sticky\">\r\n        <Toolbar>\r\n          <AppName />\r\n          {currentUser ? (\r\n            <div>\r\n              <Link to=\"/chat\">\r\n                <IconButton color=\"secondary\" aria-label=\"delete\" size=\"large\">\r\n                  <Chat />\r\n                </IconButton>\r\n              </Link>\r\n              <Link to=\"/learning-log\">\r\n                <IconButton color=\"secondary\" aria-label=\"delete\" size=\"large\">\r\n                  <CalendarToday />\r\n                </IconButton>\r\n              </Link>\r\n              <Link to=\"/account\">\r\n                <IconButton color=\"secondary\" aria-label=\"delete\" size=\"large\">\r\n                  <AccountCircle />\r\n                </IconButton>\r\n              </Link>\r\n              \r\n              <IconButton\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={async () => {\r\n                  await logOut();\r\n                  window.location.assign(\"/\");\r\n                }}\r\n              >\r\n                <ExitToApp />\r\n              </IconButton>\r\n            </div>\r\n          ) : null}\r\n        </Toolbar>\r\n      </AppBar>\r\n      {currentUser ? (\r\n        <Routes>\r\n          <Route path=\"/\" element={<HomePage />} />\r\n          <Route path=\"/course-modules/:id\" element={<CourseModulesPage />} />\r\n          <Route path=\"/account\" element={<AccountPage />} />\r\n          <Route path=\"/all-courses\" element={<AllCoursesPage />} />\r\n          <Route path=\"/chat\" element={<ChatPage />} />\r\n          <Route path=\"/interests\" element={<InterestsPage />} />\r\n          <Route path=\"/learning-log\" element={<LearningLogPage />} />\r\n          <Route path=\"/module/:id\" element={<ModulePage />} />\r\n          <Route path=\"/module-quiz/:id\" element={<ModuleQuizPage />} />\r\n        </Routes>\r\n      ) :\r\n        // sign in/register\r\n        <WelcomePage />\r\n      }\r\n    </div>\r\n  );\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}